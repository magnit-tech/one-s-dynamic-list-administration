// @strict-types

#Область СлужебныйПрограммныйИнтерфейс

// Событие подключенной формы списка "ПриОткрытии"
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - Управляемое форма
//  Отказ    - Булево - Признак отказа
//
Процедура ПриОткрытии(Форма, Отказ = Ложь) Экспорт
	
	НастройкиНаФорме = ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.НастройкиНаФорме(Форма);
	НастройкиНаФорме.ФормаОткрыта = Истина;
	
	СтандартнаяОбработка = Истина;
	ИТМ_АдминистрированиеДинамическихСписковКлиентПереопределяемый.ПередВыполнениемПриОткрытии(
		Форма, Отказ, НастройкиНаФорме, СтандартнаяОбработка);
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиНаФорме.ТекстЗапретаОткрытия) Тогда
		ПоказатьПредупреждение(Неопределено, НастройкиНаФорме.ТекстЗапретаОткрытия);
		Отказ = Истина;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из НастройкиНаФорме.Настройки Цикл
		
		ТекущиеНастройки  = КлючИЗначение.Значение; //см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонПараметровДинамическогоСписка
		ИсторияОбновления = ТекущиеНастройки.ИсторияОбновления;
		
		Если ИсторияОбновления.Использование 
			И УспешноОбработаныНакопленныеСобытияОбновления(Форма) Тогда //Проверка на наличие метода
			
			ПодключитьОбработчикОжиданияОбновленияНакопленныхСобытий(Форма, ИсторияОбновления.ЧастотаЗаписи);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИТМ_АдминистрированиеДинамическихСписковКлиентПереопределяемый.ПослеВыполненияПриОткрытии(Форма, Отказ);
	
КонецПроцедуры

// Событие подключенной формы списка "ПриЗакрытии"
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - Управляемое форма
//  ЗавершениеРаботы - Булево - Признак того, что форма закрывается в процессе завершения работы приложения
//
Процедура ПриЗакрытии(Форма, ЗавершениеРаботы) Экспорт
	
	СтандартнаяОбработка = Истина;
	ИТМ_АдминистрированиеДинамическихСписковКлиентПереопределяемый.ПередВыполнениемПриЗакрытии(
		Форма, ЗавершениеРаботы, СтандартнаяОбработка);
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗавершениеРаботы Тогда
		Попытка
			ВыполнитьМетодОбработатьНакопленныеСобытияОбновления(Форма);
		Исключение
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Обработать накопленные события обновления
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - Форма
//
Процедура ОбработатьНакопленныеСобытияОбновления(Форма) Экспорт
	
	ПовторитьЧерез   = Неопределено;
	
	НастройкиСписков = ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.НастройкиНаФорме(Форма);
	Если НастройкиСписков = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из НастройкиСписков.Настройки Цикл
		НастройкиСписка = КлючИЗначение.Значение; //см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонПараметровДинамическогоСписка
		ЗафиксироватьНакопленныеОбновленияДинамическихСписковПоНастройкеСписка(НастройкиСписка, ПовторитьЧерез);
	КонецЦикла;
	
	ПодключитьОбработчикОжиданияОбновленияНакопленныхСобытий(Форма, ПовторитьЧерез);
	
КонецПроцедуры

// Параметры открытия формы выбора ключа списка.
// 
// Возвращаемое значение:
//  Структура - Параметры открытия формы выбора ключа списка:
// * Владелец - Неопределено, Произвольный - Владелец формы
// * ТолькоПросмотр - Неопределено, Булево - Только просмотр
// * ОписаниеОповещения - Неопределено, ОписаниеОповещения - Описание оповещения об закрытии
// * Отбор - Структура -:
// ** ЕстьНастройка - Неопределено, Булево - Значение отбора (если задано) 
Функция ПараметрыОткрытияФормыВыбораКлючаСписка() Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Владелец", Неопределено);
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", Неопределено);
	ПараметрыОткрытия.Вставить("ОписаниеОповещения", Неопределено);
	
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура("ЕстьНастройка", Неопределено));
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

// Открыть форму выбора ключа списка.
// 
// Параметры:
//  ПараметрыОткрытия - см. ПараметрыОткрытияФормыВыбораКлючаСписка
Процедура ОткрытьФормуВыбораКлючаСписка(ПараметрыОткрытия) Экспорт

	ПараметрыФормы = Новый Структура;
	
	ОтборФормы = Новый Структура;
	Для Каждого КлючИЗначение Из ПараметрыОткрытия.Отбор Цикл
		Если НЕ КлючИЗначение.Значение = Неопределено Тогда
			ТекущийКлюч = КлючИЗначение.Ключ; //Строка
			ОтборФормы.Вставить(ТекущийКлюч, КлючИЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОтборФормы) Тогда
		ПараметрыФормы.Вставить("Отбор", ОтборФормы);
	КонецЕсли;
	
	Если ПараметрыОткрытия.ТолькоПросмотр <> Неопределено Тогда
		ПараметрыФормы.Вставить("ТолькоПросмотр", ПараметрыОткрытия.ТолькоПросмотр);
	КонецЕсли;
	
	//@skip-check invocation-parameter-type-intersect - Баг ЕДТ
	ОткрытьФорму("РегистрСведений.ИТМ_НастройкиДинамическихСписков.Форма.ФормаВыбораКлюча", 
		ПараметрыФормы, ПараметрыОткрытия.Владелец, , , , 
		ПараметрыОткрытия.ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Подключить обработчик ожидания обновления накопленных событий.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  Интервал - Неопределено - Интервал
Процедура ПодключитьОбработчикОжиданияОбновленияНакопленныхСобытий(Форма, Интервал)
	
	Если ТипЗнч(Интервал) = Тип("Число") И Интервал > 0 Тогда
		Форма.ПодключитьОбработчикОжидания("ИТМ_ОбработатьНакопленныеСобытияОбновления", Интервал, Истина);
	КонецЕсли;
		
КонецПроцедуры

// Выполняет метод формы по обработке накопленных событий обновления. 
// Если не удалось выполнить, то считаем, что либо метода нет, либо он содержит ошибку. 
// Если есть ошибка, то метод нельзя подключать в качестве обработчика ожидания.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - Форма
// 
// Возвращаемое значение:
// Булево - Признак успеха
//
Функция УспешноОбработаныНакопленныеСобытияОбновления(Форма)
	
	Попытка
		ВыполнитьМетодОбработатьНакопленныеСобытияОбновления(Форма);
		Возврат Истина;
	Исключение
		Возврат Ложь;   //На случай, если метода нет
	КонецПопытки;
		
КонецФункции

// Зафиксировать накопленные обновления динамических списков по настройке списка.
// 
// Параметры:
//  НастройкиСписка - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонПараметровДинамическогоСписка
//  ПовторитьЧерез - Число, Неопределено - Повторить через указанное число секунд
Процедура ЗафиксироватьНакопленныеОбновленияДинамическихСписковПоНастройкеСписка(НастройкиСписка, ПовторитьЧерез)
	
	ИсторияОбновления = НастройкиСписка.ИсторияОбновления;
	ЧастотаЗаписи     = ИсторияОбновления.ЧастотаЗаписи;
	
	Если НЕ НастройкиСписка.Использование ИЛИ НЕ ИсторияОбновления.Использование ИЛИ ЧастотаЗаписи = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПовторитьЧерез = Неопределено Тогда
		ПовторитьЧерез = ЧастотаЗаписи;
	Иначе
		ПовторитьЧерез = Мин(ПовторитьЧерез, ЧастотаЗаписи);
	КонецЕсли;
	
	ИТМ_АдминистрированиеДинамическихСписковВызовСервера.ОбработатьНакопленныеСобытияОбновления(ИсторияОбновления);
		
КонецПроцедуры

// Выполнить метод обработать накопленные события обновления.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
Процедура ВыполнитьМетодОбработатьНакопленныеСобытияОбновления(Форма)
	
	//@skip-check dynamic-access-method-not-found
	Форма.ИТМ_ОбработатьНакопленныеСобытияОбновления();
	
КонецПроцедуры

#КонецОбласти
