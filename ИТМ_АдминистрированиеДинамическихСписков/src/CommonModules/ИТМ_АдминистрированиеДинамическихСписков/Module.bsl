// @strict-types
// 
//Для подключения списка к подсистеме необходимо:
//
//	1. В событии формы "ПриСозданииНаСервере" вызвать метод:
//		ИТМ_АдминистрированиеДинамическихСписков.ПриСозданииНаСервере(ЭтотОбъект);
//
//	2. В событии элемента спика "ПередЗагрузкойПользовательскихНастроекНаСервере" вызвать метод:
//		ИТМ_АдминистрированиеДинамическихСписков.ПередЗагрузкойПользовательскихНастроекНаСервере(
//		ЭтотОбъект, Элемент, Настройки, ИспользуютсяСтандартныеНастройки);
//
//	3. В событии формы "ПриОткрытии" вызвать метод:
//		ИТМ_АдминистрированиеДинамическихСписковКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
//
//Чтобы работал механизм истории обновлений, необходимо дополнительно:
//
//	4. В форме вызвать событие ПриПолученииДанныхНаСервере
//		ИТМ_АдминистрированиеДинамическихСписков.ПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки);
//
//	5. В событии формы "ПриЗакрытии" вызвать метод:
//		ИТМ_АдминистрированиеДинамическихСписковКлиент.ПриЗакрытии(ЭтотОбъект, ЗавершениеРаботы);
//
//	6. Добавить экспортный метод для обработчика ожидания
//		
//		&НаКлиенте
//		Процедура ИТМ_ОбработатьНакопленныеСобытияОбновления() Экспорт
//			ИТМ_АдминистрированиеДинамическихСписковКлиент.ОбработатьНакопленныеСобытияОбновления(ЭтотОбъект);
//		КонецПроцедуры
//
//Для оптимизации рекомендуется:
//	7. Добавить на форму реквизит "НастройкиДинамическихСписков" с типом Произвольный
//
//


#Область СлужебныйПрограммныйИнтерфейс

#Область СобытияФорм
	
// Событие подключенной формы списка "ПриСозданииНаСервере"
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения - Управляемая форма
//  ДополнительныеПараметры	 - Структура, Неопределено - Дополнительные параметры
//
Процедура ПриСозданииНаСервере(Форма, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	ДобавитьРеквизитФормыНастройкиДинамическихСписков(Форма, ДополнительныеПараметры);
	ЗаполнитьНастройкиНаФорме(Форма, ДополнительныеПараметры);
	
	ПрименитьНастройкиПодсистемыКСпискам(Форма);
	
	ИТМ_АдминистрированиеДинамическихСписковПереопределяемый.ПриСозданииНаСервере(Форма, ДополнительныеПараметры);

КонецПроцедуры

// Событие подключенной формы списка "ПередЗагрузкойПользовательскихНастроекНаСервере"
//
// Параметры:
//  Форма							 - ФормаКлиентскогоПриложения - Управляемая форма
//  Элемент							 - ТаблицаФормы - Таблица, для которой выполняется загрузка настроек
//  ПользовательскиеНастройки		 - ПользовательскиеНастройкиКомпоновкиДанных - Загружаемые настройки
//  ИспользуютсяСтандартныеНастройки - Булево - Если имеет значение Истина, настройки были сформированы на базе основных настроек динамического списка. Если Ложь - настройки загружены из хранилища.
//
Процедура ПередЗагрузкойПользовательскихНастроекНаСервере(
	Форма, Элемент, ПользовательскиеНастройки, ИспользуютсяСтандартныеНастройки) Экспорт
	
	ОбщиеНастройки = НастройкиНаФорме(Форма);
	Если ОбщиеНастройки.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиСписка  = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОбщиеНастройки.Настройки, Элемент.Имя); //см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонПараметровДинамическогоСписка
	Если НастройкиСписка = Неопределено ИЛИ НЕ НастройкиСписка.Использование Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоОткрытиеФормы(ОбщиеНастройки) Тогда
		
		Если НастройкиСписка.ПараметрыОтладки.РежимОткрытияНастроек Тогда
		
			ПользовательскиеНастройки = НастройкиСписка.ПараметрыОтладки.Настройки; //ПользовательскиеНастройкиКомпоновкиДанных
		
		Иначе

			Если НЕ ИспользуютсяСтандартныеНастройки Тогда
				ОтключитьПользовательскиеНастройкиПриОткрытии(НастройкиСписка, ПользовательскиеНастройки);
			КонецЕсли;
	
			УстановитьПериодСпискаПриОткрытии(Форма, ОбщиеНастройки, НастройкиСписка, Элемент);
			
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьНедоступныеПоляИзНастроек(Форма, НастройкиСписка, ПользовательскиеНастройки);
	
КонецПроцедуры

// Событие подключенной формы списка "ПриПолученииДанныхНаСервере"
//
// Параметры:
//  ИмяЭлемента				 - Строка - Содержит имя таблицы формы, из которой вызван обработчик события.
//  Настройки				 - НастройкиКомпоновкиДанных - Содержит копию полных настроек динамического списка.
//  Строки					 - СтрокиДинамическогоСписка - Коллекция содержит данные и оформление всех строк, получаемых в списке, кроме строк группировок.
//  ДополнительныеПараметры	 - Структура - Дополнительные параметры метода
//
Процедура ПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОбработатьСобытиеОбновленияДинамическогоСписка(ИмяЭлемента, Настройки, Строки, ДополнительныеПараметры);
	
КонецПроцедуры

// Обрабатывает накопленные события обновления динамического списка
//
// Параметры:
//  ИсторияОбновления - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонНастроекИсторииОбновления
//
Процедура ОбработатьНакопленныеСобытияОбновления(ИсторияОбновления) Экспорт
	
	КонтекстДанных = ОбработатьНакопленныеСобытияОбновления_КонтекстДанных(ИсторияОбновления);
	Если КонтекстДанных = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Для Каждого НакопленноеОбновление Из КонтекстДанных.НакопленныеОбновления Цикл
		
		Попытка
			ЗафиксироватьНакопленноеОбновлениеДинамическогоСписка(
				КонтекстДанных.КлючСписка, НакопленноеОбновление);
		Исключение
			ИмяСобытия = "ИТМ_АдминистрированиеДинамическихСписков.ОбработатьНакопленныеСобытияОбновления";
			ОписаниеОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, 
				Метаданные.РегистрыСведений.ИТМ_ИсторияОбновленияДинамическихСписков, Неопределено, ОписаниеОшибки);
		КонецПопытки;
		
	КонецЦикла;

	КонтекстДанных.НакопленныеОбновления.Очистить();

	ИсторияОбновления.ПоследняяФиксация = ТекущаяДатаСеанса();
	
КонецПроцедуры

#КонецОбласти

#Область КлючевыеОперации
	
// Функция возвращает ключевую операцию по полному имени ключа
//
// Параметры:
//  ИмяКлючевойОперации	 - Строка, СправочникСсылка.КлючевыеОперации - Полное имя ключа
// 
// Возвращаемое значение:
//  СправочникСсылка.КлючевыеОперации - Ключевая операция
//
Функция ПолучитьКлючевуюОперацию(ИмяКлючевойОперации) Экспорт
	
	Возврат ИТМ_АдминистрированиеДинамическихСписковПовтИсп.ПолучитьКлючевуюОперацию(ИмяКлючевойОперации);
	
КонецФункции

// Нормализовать наименования ключевых операций
Процедура НормализоватьНаименованияКлючевыхОпераций() Экспорт
	
	Выборка	= ВыборкаНормализацииНаименованияКлючевыхОпераций();
	Пока Выборка.Следующий() Цикл
			
		ИмяКлючевойОперации = Выборка.Имя; //Строка
		КлючеваяОперация    = Выборка.Ссылка; //СправочникСсылка.КлючевыеОперации
		
		Наименование = ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.НаименованиеКлючевойОперации(ИмяКлючевойОперации);
		Если Наименование <> Выборка.Наименование Тогда
			НормализоватьНаименованияКлючевойОперации(КлючеваяОперация);
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

// Приводит наименование ключевой операции к правильному формату
//
// Параметры:
//  КлючеваяОперация - СправочникСсылка.КлючевыеОперации - Ключевая операция
//
Процедура НормализоватьНаименованияКлючевойОперации(КлючеваяОперация) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КлючеваяОперация) Тогда
		Возврат;
	КонецЕсли;
	
	КлючеваяОперацияОбъект = КлючеваяОперация.ПолучитьОбъект();
	КлючеваяОперацияОбъект.Наименование = 
		ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.НаименованиеКлючевойОперации(КлючеваяОперацияОбъект.Имя);
	КлючеваяОперацияОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область РедакторНастроек

// Процедура - Записать настройку динамического списка
// Приняется для программного создания настройки. Например, при обновлении системы.
//
// Параметры:
//  ИмяКлюча		 - Строка - Ключ списка
//  Настройки		 - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонПараметровДинамическогоСписка
//  Использование	 - Булево - Использование
//
Процедура ЗаписатьНастройкуДинамическогоСписка(ИмяКлюча, Настройки = Неопределено, Использование = Истина) Экспорт
	
	КлючСписка = ПолучитьКлючевуюОперацию(ИмяКлюча);
	Если ЗначениеЗаполнено(КлючСписка) Тогда
		РегистрыСведений.ИТМ_НастройкиДинамическихСписков.ДобавитьЗапись(КлючСписка, Использование, Настройки);
	КонецЕсли;
	
КонецПроцедуры

// Редактор настроек установить основные.
// 
// Параметры:
//  Настройки - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонПараметровДинамическогоСписка
//  ДинамическоеСчитываниеДанных - Неопределено, Булево - Динамическое считывание данных
//  УдалятьНедоступныеПоляНастроек - Неопределено, Булево - Удалять недоступные поля настроек
//  АвтоматическоеСохранениеПользовательскихНастроек - Неопределено, Булево - Автоматическое сохранение пользовательских настроек
//  ОтключатьПользовательскиеНастройкиПриОткрытии - Неопределено, Булево - Отключать пользовательские настройки при открытии
//@skip-check method-too-many-params
Процедура РедакторНастроек_УстановитьОсновные(Настройки, 
	ДинамическоеСчитываниеДанных = Неопределено, 
	УдалятьНедоступныеПоляНастроек = Неопределено,
	АвтоматическоеСохранениеПользовательскихНастроек = Неопределено,
	ОтключатьПользовательскиеНастройкиПриОткрытии = Неопределено) Экспорт
	
	ТекущаяКоллекция = Настройки.Основные;
	
	Если НЕ ДинамическоеСчитываниеДанных = Неопределено Тогда
		ТекущаяКоллекция.ДинамическоеСчитываниеДанных = ДинамическоеСчитываниеДанных;
	КонецЕсли;
	
	Если НЕ УдалятьНедоступныеПоляНастроек = Неопределено Тогда
		ТекущаяКоллекция.УдалятьНедоступныеПоляНастроек = УдалятьНедоступныеПоляНастроек;
	КонецЕсли;
	
	Если НЕ АвтоматическоеСохранениеПользовательскихНастроек = Неопределено Тогда
		ТекущаяКоллекция.АвтоматическоеСохранениеПользовательскихНастроек = АвтоматическоеСохранениеПользовательскихНастроек;
	КонецЕсли;
	
	Если НЕ ОтключатьПользовательскиеНастройкиПриОткрытии = Неопределено Тогда
		ТекущаяКоллекция.ОтключатьПользовательскиеНастройкиПриОткрытии = ОтключатьПользовательскиеНастройкиПриОткрытии;
	КонецЕсли;
	
КонецПроцедуры

// Редактор настроек добавить исключения ограничений.
// 
// Параметры:
//  НастройкиОграничений - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонОписанияОграничений
//  Разрешенные - Неопределено, Строка, Массив из Строка - Разрешенные
//  Запрещенные - Неопределено, Строка, Массив из Строка - Запрещенные
Процедура РедакторНастроек_ДобавитьИсключенияОграничений(НастройкиОграничений, 
	Разрешенные = Неопределено, Запрещенные = Неопределено) Экспорт
	
	Если Разрешенные <> Неопределено И НастройкиОграничений.ДополнительноРазрешенные = Неопределено Тогда
		НастройкиОграничений.ДополнительноРазрешенные = Новый СписокЗначений;
		РедакторНастроек_ЗаполнитьСписокИсключений(НастройкиОграничений.ДополнительноРазрешенные, Разрешенные);
	КонецЕсли;
	
	Если Запрещенные <> Неопределено И НастройкиОграничений.ДополнительноЗапрещенные = Неопределено Тогда
		НастройкиОграничений.ДополнительноЗапрещенные = Новый СписокЗначений;
		РедакторНастроек_ЗаполнитьСписокИсключений(НастройкиОграничений.ДополнительноЗапрещенные, Запрещенные);
	КонецЕсли;
	
КонецПроцедуры

// Доступные виды сравнения для запрета открытия.
// 
// Возвращаемое значение:
//  Массив из ВидСравненияКомпоновкиДанных
Функция ДоступныеВидыСравненияДляЗапретаОткрытия() Экспорт
	
	ДоступныеВиды = Новый Массив; //Массив из ВидСравненияКомпоновкиДанных
	ДоступныеВиды.Добавить(ВидСравненияКомпоновкиДанных.Равно);
	ДоступныеВиды.Добавить(ВидСравненияКомпоновкиДанных.НеРавно);
	ДоступныеВиды.Добавить(ВидСравненияКомпоновкиДанных.Заполнено);
	ДоступныеВиды.Добавить(ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ДоступныеВиды.Добавить(ВидСравненияКомпоновкиДанных.Больше);
	ДоступныеВиды.Добавить(ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
	ДоступныеВиды.Добавить(ВидСравненияКомпоновкиДанных.Меньше);
	ДоступныеВиды.Добавить(ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
	
	Возврат ДоступныеВиды;
	
КонецФункции

#КонецОбласти

// Возвращает ключ списка из строки
//
// Параметры:
//  КлючСписка	 - Строка, СправочникСсылка.КлючевыеОперации - Ключ списка или его имя
// 
// Возвращаемое значение:
//  СправочникСсылка.КлючевыеОперации - КлючСписка
//
Функция КлючСписка(КлючСписка) Экспорт
	
	Возврат ПолучитьКлючевуюОперацию(КлючСписка);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПрименениеНастроек

// Применить настройки подсистемы к спискам.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
Процедура ПрименитьНастройкиПодсистемыКСпискам(Форма)
	
	ОбщиеНастройки = НастройкиНаФорме(Форма);
	
	Для Каждого КлючИЗначение Из ОбщиеНастройки.Настройки Цикл
		ТекущиеНастройки = КлючИЗначение.Значение; //см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонПараметровДинамическогоСписка
		ПрименитьНастройкиПодсистемыКСписку(Форма, ОбщиеНастройки, ТекущиеНастройки);
	КонецЦикла;
	
	ПослеПримененияНастроекСписков(Форма, ОбщиеНастройки);
		
КонецПроцедуры

// Применить настройки подсистемы к списку.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  ОбщиеНастройки - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.НастройкиНаФорме
//  НастройкиСписка - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонПараметровДинамическогоСписка
Процедура ПрименитьНастройкиПодсистемыКСписку(Форма, ОбщиеНастройки, НастройкиСписка)
	
	СтандартнаяОбработка = Истина;
	ИТМ_АдминистрированиеДинамическихСписковПереопределяемый.ПередПрименениемНастройкиПодсистемыКСписку(
		Форма, 
		ОбщиеНастройки, 
		НастройкиСписка, 
		СтандартнаяОбработка);	
	
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ НастройкиСписка.Использование Тогда
		Возврат;
	КонецЕсли;
	
	Список = ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.РеквизитСписокПоНастройкам(Форма, НастройкиСписка);
	
	ПроверитьЗапретыОткрытияСписка(Форма, ОбщиеНастройки, НастройкиСписка, Список);
	Если ОбщиеНастройки.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПрименитьНастройкиИсточникаПодсистемыКСписку(Форма, ОбщиеНастройки, НастройкиСписка, Список);
	
	ПрименитьОсновныеНастройкиПодсистемыКСписку(Форма, ОбщиеНастройки, НастройкиСписка, Список);
			
	Если НастройкиСписка.ПараметрыОтладки.РежимОткрытияНастроек Тогда
		
		ПрименитьРежимОткрытияНастроекКСписку(Форма, ОбщиеНастройки, НастройкиСписка, Список);
		
	Иначе
		
		ПрименитьНастройкиОтборовПодсистемыКСписку(Форма, ОбщиеНастройки, НастройкиСписка, Список);
	
		ПрименитьНастройкиСортировкиПодсистемыКСписку(Форма, ОбщиеНастройки, НастройкиСписка, Список);
	
		ПрименитьНастройкиГруппировкиПодсистемыКСписку(Форма, ОбщиеНастройки, НастройкиСписка, Список);
	
		ПрименитьНастройкиУсловногоОформленияПодсистемыКСписку(Форма, ОбщиеНастройки, НастройкиСписка, Список);
		
	КонецЕсли;
		
	ПрименитьНастройкиИсторииОбновленияПодсистемыКСписку(Форма, ОбщиеНастройки, НастройкиСписка, Список);
	
	ИТМ_АдминистрированиеДинамическихСписковПереопределяемый.ПослеПримененияНастройкиПодсистемыКСписку(
		Форма, 
		ОбщиеНастройки, 
		НастройкиСписка);
			
КонецПроцедуры

// Применить режим открытия настроек к списку.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма списка
//  ОбщиеНастройки - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.НастройкиНаФорме
//  НастройкиСписка - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонПараметровДинамическогоСписка
//  Список - ДинамическийСписок - Список
Процедура ПрименитьРежимОткрытияНастроекКСписку(Форма, ОбщиеНастройки, НастройкиСписка, Список)
	
	Список.АвтоматическоеСохранениеПользовательскихНастроек = Ложь;
	Список.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиСписка.ПараметрыОтладки.Настройки);
	
КонецПроцедуры

// Применить настройки источника подсистемы к списку.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма списка
//  ОбщиеНастройки - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.НастройкиНаФорме
//  НастройкиСписка - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонПараметровДинамическогоСписка
//  Список - ДинамическийСписок - Список
Процедура ПрименитьНастройкиИсточникаПодсистемыКСписку(Форма, ОбщиеНастройки, НастройкиСписка, Список)
	
	ТекущиеНастройки = НастройкиСписка.Источник;
	Если НЕ ТекущиеНастройки.Использование Тогда
		Возврат;
	КонецЕсли;
	
	Список.ОсновнаяТаблица = ТекущиеНастройки.ОсновнаяТаблица;
	
	Если ПустаяСтрока(ТекущиеНастройки.ТекстЗапроса) Тогда
		Список.ТекстЗапроса = "";
		Список.ПроизвольныйЗапрос = Ложь;
	Иначе
		Список.ТекстЗапроса = ТекущиеНастройки.ТекстЗапроса;
		Список.ПроизвольныйЗапрос = Истина;
	КонецЕсли;
	
	ЗаполняемыеСвойства = "АвтоЗаполнениеДоступныхПолей,ПолучениеПредставленийДляНевидимыхПолей";
	ЗаполнитьЗначенияСвойств(Список, ТекущиеНастройки, ЗаполняемыеСвойства);	
	
КонецПроцедуры

// Применить основные настройки подсистемы к списку.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма списка
//  ОбщиеНастройки - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.НастройкиНаФорме
//  НастройкиСписка - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонПараметровДинамическогоСписка
//  Список - ДинамическийСписок - Список
Процедура ПрименитьОсновныеНастройкиПодсистемыКСписку(Форма, ОбщиеНастройки, НастройкиСписка, Список)
	
	ТекущиеНастройки    = НастройкиСписка.Основные;
	
	ЗаполняемыеСвойства = Новый Структура(
		"ДинамическоеСчитываниеДанных,АвтоматическоеСохранениеПользовательскихНастроек", 
		Неопределено, Неопределено);
	ЗаполнитьЗначенияСвойств(ЗаполняемыеСвойства, ТекущиеНастройки);
	
	Для Каждого КлючИЗначение Из ЗаполняемыеСвойства Цикл
		Если НЕ КлючИЗначение.Значение = Неопределено Тогда
			Список[КлючИЗначение.Ключ] = КлючИЗначение.Значение; 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Применить настройки отборов подсистемы к списку.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма списка
//  ОбщиеНастройки - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.НастройкиНаФорме
//  НастройкиСписка - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонПараметровДинамическогоСписка
//  Список - ДинамическийСписок - Список
Процедура ПрименитьНастройкиОтборовПодсистемыКСписку(Форма, ОбщиеНастройки, НастройкиСписка, Список)
	
	НастройкиОграничений = НастройкиСписка.Отбор;
	Если НЕ НастройкиОграничений.Использование 
		ИЛИ РолиБезОграниченийДоступны(НастройкиОграничений) Тогда
		Возврат;
	КонецЕсли;

	ДоступныеПоля   = Список.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора;
	ЗапрещенныеПоля = ЗапрещенныеПоляСписка(НастройкиОграничений, Список, ДоступныеПоля);
	
	Список.УстановитьОграниченияИспользованияВОтборе(ЗапрещенныеПоля);
	
	Если НастройкиОграничений.ИсключитьИзНастройкиСписка Тогда
		Список.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки = "";
	КонецЕсли;
	
КонецПроцедуры

// Применить настройки сортировки подсистемы к списку.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма списка
//  ОбщиеНастройки - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.НастройкиНаФорме
//  НастройкиСписка - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонПараметровДинамическогоСписка
//  Список - ДинамическийСписок - Список
Процедура ПрименитьНастройкиСортировкиПодсистемыКСписку(Форма, ОбщиеНастройки, НастройкиСписка, Список)
	
	НастройкиОграничений = НастройкиСписка.Сортировка;
	Если НЕ НастройкиОграничений.Использование 
		ИЛИ РолиБезОграниченийДоступны(НастройкиОграничений) Тогда
		Возврат;
	КонецЕсли;
	
	ДоступныеПоля   = Список.КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка;
	ЗапрещенныеПоля = ЗапрещенныеПоляСписка(НастройкиОграничений, Список, ДоступныеПоля);
	
	Список.УстановитьОграниченияИспользованияВПорядке(ЗапрещенныеПоля);
	
	Если НастройкиОграничений.ИсключитьИзНастройкиСписка Тогда
		Список.КомпоновщикНастроек.Настройки.Порядок.ИдентификаторПользовательскойНастройки = "";
	КонецЕсли;
		
КонецПроцедуры

// Применить настройки группировки подсистемы к списку.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма списка
//  ОбщиеНастройки - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.НастройкиНаФорме
//  НастройкиСписка - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонПараметровДинамическогоСписка
//  Список - ДинамическийСписок - Список
Процедура ПрименитьНастройкиГруппировкиПодсистемыКСписку(Форма, ОбщиеНастройки, НастройкиСписка, Список)
	
	НастройкиОграничений = НастройкиСписка.Группировка;
	Если НЕ НастройкиОграничений.Использование 
		ИЛИ РолиБезОграниченийДоступны(НастройкиОграничений) Тогда
		Возврат;
	КонецЕсли;
	
	ДоступныеПоля   = Список.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок;
	ЗапрещенныеПоля = ЗапрещенныеПоляСписка(НастройкиОграничений, Список, ДоступныеПоля);
	
	Список.УстановитьОграниченияИспользованияВГруппировке(ЗапрещенныеПоля);
	
	Если НастройкиОграничений.ИсключитьИзНастройкиСписка Тогда
		Список.КомпоновщикНастроек.Настройки.Структура.ИдентификаторПользовательскойНастройки = "";
	КонецЕсли;
		
КонецПроцедуры

// Применить настройки условного оформления подсистемы к списку.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма списка
//  ОбщиеНастройки - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.НастройкиНаФорме
//  НастройкиСписка - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонПараметровДинамическогоСписка
//  Список - ДинамическийСписок - Список
Процедура ПрименитьНастройкиУсловногоОформленияПодсистемыКСписку(Форма, ОбщиеНастройки, НастройкиСписка, Список)
	
	НастройкиОграничений = НастройкиСписка.УсловноеОформление;
	Если НЕ НастройкиОграничений.Использование Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкиОграничений.ИсключитьИзНастройкиСписка Тогда
		Список.КомпоновщикНастроек.Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
	КонецЕсли;
		
КонецПроцедуры

// Применить настройки истории обновления подсистемы к списку.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма списка
//  ОбщиеНастройки - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.НастройкиНаФорме
//  НастройкиСписка - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонПараметровДинамическогоСписка
//  Список - ДинамическийСписок - Список
Процедура ПрименитьНастройкиИсторииОбновленияПодсистемыКСписку(Форма, ОбщиеНастройки, НастройкиСписка, Список)
	
	ИсторияОбновления = НастройкиСписка.ИсторияОбновления;
	Если ИсторияОбновления.Использование Тогда
		
		НакопленнаяИстория = ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонОписанияНакопленнойИсторииОбновлений(
			ИсторияОбновления);
		НакопленнаяИстория.КлючСписка = НастройкиСписка.КлючСписка;
		
		АдресНакопленного = ПоместитьВоВременноеХранилище(НакопленнаяИстория, Форма.УникальныйИдентификатор);
		
	Иначе
		
		АдресНакопленного = "";
		
	КонецЕсли;
	
	ИсторияОбновления.АдресНакопленного = АдресНакопленного;
	
	СвойствоКонтейнера = ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ИмяСвойстваКонтекстаСобытийОбновленияСписка();
	Список.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить(СвойствоКонтейнера, АдресНакопленного);
		
КонецПроцедуры

// Проверить запреты открытия формы
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма списка
//  ОбщиеНастройки - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.НастройкиНаФорме
//  НастройкиСписка - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонПараметровДинамическогоСписка
//  Список - ДинамическийСписок - Список
Процедура ПроверитьЗапретыОткрытияСписка(Форма, ОбщиеНастройки, НастройкиСписка, Список)
	
	НастройкиОграничений = НастройкиСписка.ЗапретыОткрытия;
	Если НЕ НастройкиОграничений.Использование 
		ИЛИ РолиБезОграниченийДоступны(НастройкиОграничений) Тогда
		Возврат;
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстыЗапрета = Новый Массив; //Массив из Строка
	Если ЗначениеЗаполнено(ОбщиеНастройки.ТекстЗапретаОткрытия) Тогда
		ТекстыЗапрета.Добавить(ОбщиеНастройки.ТекстЗапретаОткрытия);
	КонецЕсли;
	
	Для Каждого ОписаниеЗапрета Из НастройкиОграничений.КоллекцияЗапретов Цикл
		
		ПроверитьЗапретыОткрытияСписка_ОбработатьОписаниеЗапрета(ОписаниеЗапрета, ТекстыЗапрета);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстыЗапрета) Тогда
		ОбщиеНастройки.ТекстЗапретаОткрытия = СтрСоединить(ТекстыЗапрета, Символы.ПС);
		ОбщиеНастройки.Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Проверить запреты открытия списка обработать описание запрета.
// 
// Параметры:
//  ОписаниеЗапрета - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонОписанияЭлементаЗапретаОткрытия
//  ТекстыЗапрета - Массив из Строка - Тексты запрета
Процедура ПроверитьЗапретыОткрытияСписка_ОбработатьОписаниеЗапрета(ОписаниеЗапрета, ТекстыЗапрета)
	
	Если НЕ ОписаниеЗапрета.Использование 
		ИЛИ НЕ ЗначениеЗаполнено(ОписаниеЗапрета.ИсточникЗначения)
		ИЛИ НЕ ЗначениеЗаполнено(ОписаниеЗапрета.ВидСравнения)
		ИЛИ НЕ ЗначениеЗаполнено(ОписаниеЗапрета.ТекстЗапрета) Тогда
		
		Возврат;
		
	КонецЕсли;

	ИсточникЗначения = Метаданные.НайтиПоПолномуИмени(ОписаниеЗапрета.ИсточникЗначения);
	Если ИсточникЗначения = Неопределено Тогда
		ТекстыЗапрета.Добавить("Не удалось найти источник данных для проверки запрета открытия!");
		Возврат;
	КонецЕсли;

	Если Метаданные.ПараметрыСеанса.Содержит(ИсточникЗначения) Тогда
		ЗначениеИсточника = ПараметрыСеанса[ИсточникЗначения.Имя]; //Произвольный
	ИначеЕсли Метаданные.Константы.Содержит(ИсточникЗначения) Тогда
		ЗначениеИсточника = Константы[ИсточникЗначения.Имя].Получить();
	Иначе
		ЗначениеИсточника = Неопределено;
	КонецЕсли;

	Попытка

		ЭтоЗапретОткрытия = СравнитьЗначения(ЗначениеИсточника, ОписаниеЗапрета.ВидСравнения,
			ОписаниеЗапрета.ЗначениеСравнения);

		Если ЭтоЗапретОткрытия Тогда
			ТекстыЗапрета.Добавить(ОписаниеЗапрета.ТекстЗапрета);
		КонецЕсли;

	Исключение

		ОписаниеОшибки = "Не удалось выполнить проверку запрета открытия по причине: %1";
		ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, ОписаниеОшибки());
		ТекстыЗапрета.Добавить(ОписаниеОшибки);

	КонецПопытки;
	
КонецПроцедуры

// После применения настроек списков
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма списка
//  ОбщиеНастройки - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.НастройкиНаФорме
Процедура ПослеПримененияНастроекСписков(Форма, ОбщиеНастройки)
	
	Если ОбщиеНастройки.Отказ Тогда
		
		ОтключитьВидимостьСписков(Форма, ОбщиеНастройки);
		
	КонецЕсли;
	
КонецПроцедуры

// Отключить видимость списков
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма списка
//  ОбщиеНастройки - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.НастройкиНаФорме
Процедура ОтключитьВидимостьСписков(Форма, ОбщиеНастройки)
	
	Для Каждого КлючИЗначение Из ОбщиеНастройки.Настройки Цикл
		ИмяЭлемента = КлючИЗначение.Ключ; //Строка
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы, ИмяЭлемента, "Видимость", Ложь);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеДинамическогоСписка

// Обработать событие обновления динамического списка.
// 
// Параметры:
//  ИмяЭлемента - Строка - Имя элемента
//  Настройки - НастройкиКомпоновкиДанных - Настройки
//  Строки - СтрокиДинамическогоСписка - Строки
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры
Процедура ОбработатьСобытиеОбновленияДинамическогоСписка(ИмяЭлемента, Настройки, Строки, ДополнительныеПараметры)
	
	КонтекстДанных    = КонтекстДанныхСобытияОбновленияДинамическогоСписка(Настройки);
	Если КонтекстДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НеобходимоЗафиксировать = НеобходимоФиксироватьСобытиеОбновленияДинамическогоСписка(КонтекстДанных, Настройки);
	Если НЕ НеобходимоЗафиксировать Тогда
		Возврат;
	КонецЕсли;
	
	НакопленноеОбновление = ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонОписанияНакопленногоОбновления();
	НакопленноеОбновление.Настройки = Настройки;
	
	КонтекстДанных.НакопленныеОбновления.Добавить(НакопленноеОбновление);
	ИсторияОбновления = КонтекстДанных.ПараметрыИстории;
	Если ИсторияОбновления.ЧастотаЗаписи = 0 Тогда
		ОбработатьНакопленныеСобытияОбновления(ИсторияОбновления);
	КонецЕсли;
	
КонецПроцедуры
  
// Контекст данных события обновления динамического списка.
// 
// Параметры:
//  Настройки - НастройкиКомпоновкиДанных - Настройки
// 
// Возвращаемое значение:
//  см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонОписанияНакопленнойИсторииОбновлений
Функция КонтекстДанныхСобытияОбновленияДинамическогоСписка(Настройки)
	
	СвойствоКонтекста = ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ИмяСвойстваКонтекстаСобытийОбновленияСписка();
	
	АдресКонтекста = "";
	Если Настройки.ДополнительныеСвойства.Свойство(СвойствоКонтекста, АдресКонтекста)
		И ТипЗнч(АдресКонтекста) = Тип("Строка") 
		И ЗначениеЗаполнено(АдресКонтекста) 
		И ЭтоАдресВременногоХранилища(АдресКонтекста) Тогда
			
		ДанныеКонтекста = ПолучитьИзВременногоХранилища(АдресКонтекста);
		
	Иначе
		
		ДанныеКонтекста = Неопределено;
			
	КонецЕсли;
	
	Возврат ДанныеКонтекста;
		
КонецФункции


// Необходимо фиксировать событие обновления динамического списка.
// 
// Параметры:
//  ДанныеКонтекста - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонОписанияНакопленнойИсторииОбновлений
//  Настройки - НастройкиКомпоновкиДанных - Настройки
// 
// Возвращаемое значение:
//  Булево
Функция НеобходимоФиксироватьСобытиеОбновленияДинамическогоСписка(ДанныеКонтекста, Настройки)
	
	ИсторияОбновления = ДанныеКонтекста.ПараметрыИстории;
	
	Если ТипЗнч(ИсторияОбновления) <> Тип("Структура")
		ИЛИ НЕ ИсторияОбновления.Использование Тогда
		
        НеобходимоЗафиксировать = Ложь;
		
	Иначе
		
		НеобходимоЗафиксировать = ИсторияОбновления.ФиксироватьВсе
		ИЛИ НеобходимоФиксироватьСобытиеОбновленияДинамическогоСписка_Группировки(ИсторияОбновления, Настройки)
		ИЛИ НеобходимоФиксироватьСобытиеОбновленияДинамическогоСписка_Сортировки(ИсторияОбновления, Настройки)
		ИЛИ НеобходимоФиксироватьСобытиеОбновленияДинамическогоСписка_Отборы(ИсторияОбновления, Настройки);
		
	КонецЕсли;
	
	Если НеобходимоЗафиксировать И ИсторияОбновления.ТолькоИзмененные Тогда
		
		ТекущиеНастройки = ЗначениеВСтрокуВнутр(Настройки);
		
		Если ТекущиеНастройки = ДанныеКонтекста.ПрошлыеНастройки Тогда
			НеобходимоЗафиксировать = Ложь;
		Иначе
			ДанныеКонтекста.ПрошлыеНастройки = ТекущиеНастройки;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НеобходимоЗафиксировать;
	
КонецФункции

// Необходимо фиксировать событие обновления динамического списка группировки.
// 
// Параметры:
//  ИсторияОбновления - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонНастроекИсторииОбновления
//  Настройки - НастройкиКомпоновкиДанных - Настройки
// 
// Возвращаемое значение:
//  Булево
Функция НеобходимоФиксироватьСобытиеОбновленияДинамическогоСписка_Группировки(ИсторияОбновления, Настройки)
	
	Если НЕ ИсторияОбновления.ФиксироватьГруппировки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из Настройки.Структура Цикл
		
		Если НЕ ЭлементСтруктуры.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
			
			Если ПолеГруппировки.Использование Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Необходимо фиксировать событие обновления динамического списка сортировки.
// 
// Параметры:
//  ИсторияОбновления - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонНастроекИсторииОбновления
//  Настройки - НастройкиКомпоновкиДанных - Настройки
// 
// Возвращаемое значение:
//  Булево
Функция НеобходимоФиксироватьСобытиеОбновленияДинамическогоСписка_Сортировки(ИсторияОбновления, Настройки)
	
	Если ИсторияОбновления.ФиксироватьСортировки Тогда
		
		Для Каждого ТекущийЭлемент Из Настройки.Порядок.Элементы Цикл
			
			Если ТекущийЭлемент.Использование Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции
 
// Необходимо фиксировать событие обновления динамического списка отборы.
// 
// Параметры:
//  ИсторияОбновления - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонНастроекИсторииОбновления
//  Настройки - НастройкиКомпоновкиДанных - Настройки
// 
// Возвращаемое значение:
//  Булево
Функция НеобходимоФиксироватьСобытиеОбновленияДинамическогоСписка_Отборы(ИсторияОбновления, Настройки)
	
	Если ИсторияОбновления.ФиксироватьОтборы Тогда
		
		Для Каждого ТекущийЭлемент Из Настройки.Отбор.Элементы Цикл
			
			Если ТекущийЭлемент.Использование Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Обработать накопленные события обновления контекст данных.
// 
// Параметры:
//  ИсторияОбновления - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонНастроекИсторииОбновления
// 
// Возвращаемое значение:
//  см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонОписанияНакопленнойИсторииОбновлений
Функция ОбработатьНакопленныеСобытияОбновления_КонтекстДанных(ИсторияОбновления)
	
	АдресДанных    = Строка(ИсторияОбновления.АдресНакопленного);
	КонтекстДанных = Неопределено;
	
	Если ЭтоАдресВременногоХранилища(АдресДанных) Тогда
		КонтекстДанных = ПолучитьИзВременногоХранилища(АдресДанных);
	КонецЕсли;
	
	Возврат КонтекстДанных;
	
КонецФункции

// Зафиксировать накопленное обновление динамического списка.
// 
// Параметры:
//  КлючСписка - СправочникСсылка.КлючевыеОперации, Неопределено - Ключ списка
//  НакопленноеОбновление - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонОписанияНакопленногоОбновления
Процедура ЗафиксироватьНакопленноеОбновлениеДинамическогоСписка(КлючСписка, НакопленноеОбновление)

	УстановитьПривилегированныйРежим(Истина);
	
	Настройки = НакопленноеОбновление.Настройки; //НастройкиКомпоновкиДанных
	
	МенеджерЗаписи = РегистрыСведений.ИТМ_ИсторияОбновленияДинамическихСписков.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.КлючСписка = КлючСписка;
	МенеджерЗаписи.Дата = НакопленноеОбновление.Дата;
	МенеджерЗаписи.Пользователь = ИТМ_АдминистрированиеДинамическихСписковПовтИсп.ТекущийПользователь();
	МенеджерЗаписи.ДатаМиллисекунды = НакопленноеОбновление.ДатаМиллисекунды;
	МенеджерЗаписи.НомерСеанса = НомерСеансаИнформационнойБазы();
	МенеджерЗаписи.Настройки = Новый ХранилищеЗначения(Настройки);
	
	МенеджерЗаписи.ПредставлениеГруппировки = ПредставлениеГруппировкиНастроекДинамическогоСписка(Настройки);
	МенеджерЗаписи.ПредставлениеОтборов     = ПредставлениеОтборовКомпоновкиНастроекДинамическогоСписка(Настройки.Отбор.Элементы);
	МенеджерЗаписи.ПредставлениеСортировки  = ПредставлениеСортировкиНастроекДинамическогоСписка(Настройки);
	МенеджерЗаписи.ПредставлениеПараметры   = ПредставлениеПараметровНастроекДинамическогоСписка(Настройки);
	
	МенеджерЗаписи.Записать(Истина);
		
КонецПроцедуры

// Представление группировки настроек динамического списка.
// 
// Параметры:
//  Настройки - НастройкиКомпоновкиДанных, Неопределено - Настройки
// 
// Возвращаемое значение:
//  Строка
Функция ПредставлениеГруппировкиНастроекДинамическогоСписка(Настройки)
	
	ЧастиПредставления = Новый Массив; //Массив из Строка
	
	Для Каждого ЭлементСтруктуры Из Настройки.Структура Цикл
		
		Если НЕ ЭлементСтруктуры.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
			
			Если НЕ ПолеГруппировки.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			ЧастиПредставления.Добавить(Строка(ПолеГруппировки.Поле));
			
		КонецЦикла; 
		
	КонецЦикла;
	
	Возврат СтрСоединить(ЧастиПредставления, "; ");
	
КонецФункции
  
// Представление сортировки настроек динамического списка.
// 
// Параметры:
//  Настройки - НастройкиКомпоновкиДанных
// 
// Возвращаемое значение:
//  Строка
Функция ПредставлениеСортировкиНастроекДинамическогоСписка(Настройки)
	
	ЧастиПредставления = Новый Массив; //Массив из Строка
	
	Для Каждого ТекущийЭлемент Из Настройки.Порядок.Элементы Цикл
		
		Если НЕ ТекущийЭлемент.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ТекущийЭлемент) = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
			ТекущееПредставление = СтрШаблон("%1 [%2]", ТекущийЭлемент.Поле, ТекущийЭлемент.ТипУпорядочивания);
		Иначе
			ТекущееПредставление = Строка(ТекущийЭлемент);
		КонецЕсли;
		
		ЧастиПредставления.Добавить(Строка(ТекущееПредставление));
		
	КонецЦикла;
	
	Возврат СтрСоединить(ЧастиПредставления, "; ");
	
КонецФункции
  
// Представление параметров настроек динамического списка.
// 
// Параметры:
//  Настройки - НастройкиКомпоновкиДанных
// 
// Возвращаемое значение:
//  Строка
Функция ПредставлениеПараметровНастроекДинамическогоСписка(Настройки)
	
	ЧастиПредставления = Новый Массив; //Массив из Строка
	
	Для Каждого ТекущийЭлемент Из Настройки.ПараметрыДанных.Элементы Цикл
		
		Если НЕ ТекущийЭлемент.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		//@skip-check property-return-type - баг ЕДТ
		ТекущееПредставление  = СтрШаблон("%1 = %2", 
			ТекущийЭлемент.Параметр, ТекущийЭлемент.Значение);
		ЧастиПредставления.Добавить(ТекущееПредставление);
		
	КонецЦикла;
	
	Возврат СтрСоединить(ЧастиПредставления, "; ");
	
КонецФункции

// Представление отборов компоновки настроек динамического списка.
// 
// Параметры:
//  КоллекцияОтборов - КоллекцияЭлементовОтбораКомпоновкиДанных - Коллекция отборов
//  ТипГруппы - Строка, ТипГруппыЭлементовОтбораКомпоновкиДанных - Тип группы
//  ПереноситьСтроки - Булево - Переносить строки
// 
// Возвращаемое значение:
//  Строка
Функция ПредставлениеОтборовКомпоновкиНастроекДинамическогоСписка(КоллекцияОтборов, ТипГруппы = "И", ПереноситьСтроки = Истина)
	
	ЧастиПредставления = Новый Массив; //Массив из Строка
	РазделительЧастей  = СтрШаблон(" %1 ", ПредставлениеТипаГруппыЭлементовОтбораКомпоновкиДанных(ТипГруппы));
	Если ПереноситьСтроки Тогда
		РазделительЧастей = Символы.ПС + РазделительЧастей;
	КонецЕсли;
	
	Для Каждого ЭлементОтбора Из КоллекцияОтборов Цикл
		
		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущееПредставление = "";
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			ТекущееПредставление = ПредставлениеОтборовКомпоновкиНастроекДинамическогоСписка(
			ЭлементОтбора.Элементы, ЭлементОтбора.ТипГруппы, Ложь);
			
			ТекущееПредставление = СтрШаблон("( %1 )", ТекущееПредставление);
			
		Иначе
			
			//@skip-check property-return-type
			ПравоеЗначение = ЭлементОтбора.ПравоеЗначение; //Произвольный
			
			Если ТипЗнч(ПравоеЗначение) = Тип("ПолеКомпоновкиДанных") 
				ИЛИ ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено
				ИЛИ ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
				
				КавычкиВокругЗначения = "";
				
			Иначе
				
				КавычкиВокругЗначения = """";
				
			КонецЕсли;
			
			ТекущееПредставление  = СтрШаблон("%1 %2 %4%3%4", ЭлементОтбора.ЛевоеЗначение, 
				ЭлементОтбора.ВидСравнения, ПравоеЗначение, КавычкиВокругЗначения);
			
		КонецЕсли;
		
		ЧастиПредставления.Добавить(ТекущееПредставление);
		
	КонецЦикла;
	
	Возврат СтрСоединить(ЧастиПредставления, РазделительЧастей);
	
КонецФункции

// Представление типа группы элементов отбора компоновки данных.
// 
// Параметры:
//  ТипГруппы - Строка, ТипГруппыЭлементовОтбораКомпоновкиДанных - Тип группы
// 
// Возвращаемое значение:
//  Строка
Функция ПредставлениеТипаГруппыЭлементовОтбораКомпоновкиДанных(ТипГруппы)
	
	Если ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ Тогда
		ПредставлениеТипа = "И";
	ИначеЕсли ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
		ПредставлениеТипа = "ИЛИ";
	ИначеЕсли ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
		ПредставлениеТипа = "НЕ";
	Иначе
		ПредставлениеТипа = Строка(ТипГруппы);
	КонецЕсли;
	
	Возврат ПредставлениеТипа;
		
КонецФункции

#КонецОбласти

#Область ОпределениеЗапрещенныхПолей
	
// Запрещенные поля списка.
// 
// Параметры:
//  НастройкиОграничений - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонОписанияОграничений
//  Список - ДинамическийСписок - Список
//  ДоступныеПоля - ДоступныеПоляКомпоновкиДанных - Доступные поля
// 
// Возвращаемое значение:
//  Массив из Строка
Функция ЗапрещенныеПоляСписка(НастройкиОграничений, Список, ДоступныеПоля)
	
	РазрешенныеИзБазы = НастройкиОграничений.ДополнительноРазрешенные;
	РазрешенныеПоля   = ЗапрещенныеПоляСписка_ПоляИзНастроек(РазрешенныеИзБазы, ДоступныеПоля, Истина, Истина);
	
	ЗапрещенныеИзБазы = НастройкиОграничений.ДополнительноЗапрещенные;
	ЗапрещенныеПоля   = ЗапрещенныеПоляСписка_ПоляИзНастроек(ЗапрещенныеИзБазы, ДоступныеПоля, Истина, Ложь);
	
	Для Каждого ДоступноеПоле Из ДоступныеПоля.Элементы Цикл
		
		ОписаниеПоля = ЗапрещенныеПоляСписка_ОписаниеПоля(НастройкиОграничений, ДоступноеПоле, Список);
		
		ЗапрещенныеПоляСписка_ОпределитьЗапреты(НастройкиОграничений, ОписаниеПоля, ЗапрещенныеПоля);
		ЗапрещенныеПоляСписка_ОпределитьЗапретыПодчиненных(НастройкиОграничений, ОписаниеПоля, ЗапрещенныеПоля);
		ЗапрещенныеПоляСписка_Запретить(ОписаниеПоля, ЗапрещенныеПоля, РазрешенныеПоля);
		
	КонецЦикла;
	
	ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.УдалитьВсеВхожденияЗначенийИзМассива(ЗапрещенныеПоля, РазрешенныеПоля);
	
	Возврат ЗапрещенныеПоля;
	
КонецФункции

// Запрещенные поля списка поля из настроек.
// 
// Параметры:
//  СписокЗначений - СписокЗначений из Строка - Список значений
//  ДоступныеПоля - ДоступныеПоляКомпоновкиДанных - Доступные поля
//  РазворачиватьПодчиненные - Булево - Разворачивать подчиненные
//  РазворачиватьСоставляющие - Булево - Разворачивать составляющие
// 
// Возвращаемое значение:
//  Массив из Строка
Функция ЗапрещенныеПоляСписка_ПоляИзНастроек(СписокЗначений, ДоступныеПоля, 
	РазворачиватьПодчиненные, РазворачиватьСоставляющие)
	
	МассивЗначений = Новый Массив;
	
	Если ТипЗнч(СписокЗначений) = Тип("СписокЗначений") Тогда
		Для Каждого ЭлементСписка Из СписокЗначений Цикл
			
			Если НЕ ЭлементСписка.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			Значение = ЭлементСписка.Значение;
			ЗапрещенныеПоляСписка_ДобавитьПоле(МассивЗначений, Значение);
			
			Если НЕ РазворачиватьПодчиненные И НЕ РазворачиватьСоставляющие Тогда
				Продолжить;
			КонецЕсли;
			
			ЗапрещенныеПоляСписка_ПоляИзНастроек_Развернуть(ДоступныеПоля, 
			Значение, МассивЗначений, РазворачиватьПодчиненные, РазворачиватьСоставляющие);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивЗначений;
		
КонецФункции

// Запрещенные поля списка поля из настроек развернуть.
// 
// Параметры:
//  ДоступныеПоля - ДоступныеПоляКомпоновкиДанных - Доступные поля
//  Значение - Произвольный - Значение
//  МассивЗначений - Массив из Строка - Массив значений
//  РазворачиватьПодчиненные - Булево - Разворачивать подчиненные
//  РазворачиватьСоставляющие - Булево - Разворачивать составляющие
Процедура ЗапрещенныеПоляСписка_ПоляИзНастроек_Развернуть(ДоступныеПоля, Значение, 
	МассивЗначений, РазворачиватьПодчиненные, РазворачиватьСоставляющие)
	
	ЧастиПути   = СтрРазделить(Строка(Значение), ".", Ложь);
	ТекущийПуть = "";
	
	Для Каждого ЧастьПути Из ЧастиПути Цикл
		
		Если ЧастьПути = "*" Тогда
			
			ЗапрещенныеПоляСписка_ПоляИзНастроек_РазвернутьПодчиненные(
			РазворачиватьПодчиненные, ДоступныеПоля, ТекущийПуть, МассивЗначений);
			
		Иначе
			
			ТекущийПуть = ПолныйПутьКПолю(ЧастьПути, ТекущийПуть);
			
			Если РазворачиватьСоставляющие Тогда
				ЗапрещенныеПоляСписка_ДобавитьПоле(МассивЗначений, ТекущийПуть);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Запрещенные поля списка поля из настроек развернуть подчиненные.
// 
// Параметры:
//  РазворачиватьПодчиненные - Булево - Разворачивать подчиненные
//  ДоступныеПоля - ДоступныеПоляКомпоновкиДанных - Доступные поля
//  ТекущийПуть - Строка - Текущий путь
//  МассивЗначений - Массив из Строка - Массив значений
Процедура ЗапрещенныеПоляСписка_ПоляИзНастроек_РазвернутьПодчиненные(
	РазворачиватьПодчиненные, ДоступныеПоля, ТекущийПуть, МассивЗначений)
	
	Если НЕ РазворачиватьПодчиненные Тогда
		Возврат;
	КонецЕсли;
	
	КонечноеПоле = ДоступныеПоля.НайтиПоле(Новый ПолеКомпоновкиДанных(ТекущийПуть));
	Если КонечноеПоле <> Неопределено Тогда
		Для Каждого ПодчиненныйЭлемент Из КонечноеПоле.Элементы Цикл
			ЗапрещенныеПоляСписка_ДобавитьПоле(МассивЗначений, ПодчиненныйЭлемент.Поле);
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

// Запрещенные поля списка добавить поле.
// 
// Параметры:
//  МассивПолей - Массив из Строка - Массив полей
//  Поле - Строка, Произвольный, ПолеКомпоновкиДанных - Поле
Процедура ЗапрещенныеПоляСписка_ДобавитьПоле(МассивПолей, Знач Поле)
	
	Поле = ВРег(СокрЛП(Поле));
	
	ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ДобавитьВМассивСПроверкой(МассивПолей, Поле);
	
КонецПроцедуры

// Запрещенные поля списка описание поля.
// 
// Параметры:
//  НастройкиОграничений - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонОписанияОграничений
//  ДоступноеПоле - ДоступноеПолеКомпоновкиДанных, ДоступноеПолеОтбораКомпоновкиДанных - Доступное поле
//  Список - ДинамическийСписок - Список
// 
// Возвращаемое значение:
//  Структура - Запрещенные поля списка описание поля:
// * Путь - Строка - Путь к полю
// * ДоступноеПоле - ДоступноеПолеКомпоновкиДанных, ДоступноеПолеОтбораКомпоновкиДанных - Доступное поле
// * ПутьКПодчиненным - Строка - Путь к подчиненным полям
// * Запретить - Булево - Запретить использование
// * ЗапретитьПодчиненные - Булево - Запретить подчиненные
// * ЗапретитьПодчиненныеТаблицы - Булево - Запретить подчиненные таблицы
// * Список - ДинамическийСписок - Список ограничений
// * Типы - Неопределено, Массив из Тип - Типы поля
// * Составное - Неопределено, Булево - Составное поле
// * Ссылочное - Неопределено, Булево - Ссылочное поле
// * Индексируемое - Неопределено, Булево - Индексируемое поле
Функция ЗапрещенныеПоляСписка_ОписаниеПоля(НастройкиОграничений, ДоступноеПоле, Список)
	
	ОписаниеПоля   = Новый Структура;
	ОписаниеПоля.Вставить("Путь", ВРег(Строка(ДоступноеПоле.Поле)));
	ОписаниеПоля.Вставить("ДоступноеПоле", ДоступноеПоле);
	
	ОписаниеПоля.Вставить("ПутьКПодчиненным", ОписаниеПоля.Путь + ".*");
	
	ОписаниеПоля.Вставить("Запретить", Ложь);
	ОписаниеПоля.Вставить("ЗапретитьПодчиненные", Ложь);
	ОписаниеПоля.Вставить("ЗапретитьПодчиненныеТаблицы", Ложь);
	
	ОписаниеПоля.Вставить("Список", Список);
	
	//Значения определятся при необходимости.
	//Для получения использовать методы-геттеры.
	ОписаниеПоля.Вставить("Типы"         , Неопределено);
	ОписаниеПоля.Вставить("Составное"    , Неопределено);
	ОписаниеПоля.Вставить("Ссылочное"    , Неопределено);
	ОписаниеПоля.Вставить("Индексируемое", Неопределено);
	
	Возврат ОписаниеПоля;
		
КонецФункции

// Запрещенные поля списка определить запреты.
// 
// Параметры:
//  НастройкиОграничений - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонОписанияОграничений
//  ОписаниеПоля - см. ЗапрещенныеПоляСписка_ОписаниеПоля
//  ЗапрещенныеПоля - Массив из Строка - Запрещенные поля
Процедура ЗапрещенныеПоляСписка_ОпределитьЗапреты(НастройкиОграничений, ОписаниеПоля, ЗапрещенныеПоля)
	
	Если НастройкиОграничений.ЗапрещатьПоВсемПолям Тогда
		
		ОписаниеПоля.Запретить = Истина;
		
	ИначеЕсли ЗапрещенныеПоля.Найти(ОписаниеПоля.Путь) <> Неопределено Тогда
		
		ОписаниеПоля.Запретить = Истина;
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(
		ЗапрещенныеПоля, ОписаниеПоля.Путь);
		
	ИначеЕсли НастройкиОграничений.ЗапрещатьПоТаблицам 
		И ОписаниеПоля.ДоступноеПоле.Таблица Тогда
		
		ОписаниеПоля.Запретить = Истина;
		
	ИначеЕсли НастройкиОграничений.ЗапрещатьПоСоставным 
		И ЗапрещенныеПоляСписка_ПолеСоставное(ОписаниеПоля) Тогда
		
		ОписаниеПоля.Запретить = Истина;
		
	ИначеЕсли НастройкиОграничений.ЗапрещатьПоСсылочным 
		И ЗапрещенныеПоляСписка_ПолеСсылочное(ОписаниеПоля) Тогда
		
		ОписаниеПоля.Запретить = Истина;
		
	ИначеЕсли НастройкиОграничений.ЗапрещатьПоНеИндексируемым 
		И НЕ ЗапрещенныеПоляСписка_ПолеИндексируемое(ОписаниеПоля) Тогда
		
		ОписаниеПоля.Запретить = Истина;
		
	Иначе
		
		Возврат; 
	
	КонецЕсли;
	
КонецПроцедуры

// Запрещенные поля списка определить запреты подчиненных.
// 
// Параметры:
//  НастройкиОграничений - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонОписанияОграничений
//  ОписаниеПоля - см. ЗапрещенныеПоляСписка_ОписаниеПоля
//  ЗапрещенныеПоля - Массив из Строка - Запрещенные поля
Процедура ЗапрещенныеПоляСписка_ОпределитьЗапретыПодчиненных(НастройкиОграничений, ОписаниеПоля, ЗапрещенныеПоля)
	
	Если ОписаниеПоля.Запретить Тогда
		
		ОписаниеПоля.ЗапретитьПодчиненные = Истина;
	
	ИначеЕсли НастройкиОграничений.ЗапрещатьПоПодчиненным Тогда
		
		ОписаниеПоля.ЗапретитьПодчиненные = Истина;
		
	ИначеЕсли ЗапрещенныеПоля.Найти(ОписаниеПоля.ПутьКПодчиненным) <> Неопределено Тогда
		
		ОписаниеПоля.ЗапретитьПодчиненные = Истина;
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(
		ЗапрещенныеПоля, ОписаниеПоля.ПутьКПодчиненным);
		
	ИначеЕсли НастройкиОграничений.ЗапрещатьПоПодчиненнымСоставных 
		И ЗапрещенныеПоляСписка_ПолеСоставное(ОписаниеПоля) Тогда
		
		ОписаниеПоля.ЗапретитьПодчиненные = Истина;
		
	ИначеЕсли НастройкиОграничений.ЗапрещатьПоПодчиненнымНеИндексируемых 
		И НЕ ЗапрещенныеПоляСписка_ПолеИндексируемое(ОписаниеПоля) Тогда
		
		ОписаниеПоля.ЗапретитьПодчиненные = Истина;
		
	ИначеЕсли НастройкиОграничений.ЗапрещатьПоПодчиненнымТаблицам Тогда
		
		ОписаниеПоля.ЗапретитьПодчиненныеТаблицы = Истина;
	
	Иначе
		
		Возврат;
			
	КонецЕсли;
		
КонецПроцедуры

// Запрещенные поля списка запретить.
// 
// Параметры:
//  ОписаниеПоля - см. ЗапрещенныеПоляСписка_ОписаниеПоля
//  ЗапрещенныеПоля - Массив из Строка - Запрещенные поля
//  РазрешенныеПоля - Массив из Строка - Разрешенные поля
Процедура ЗапрещенныеПоляСписка_Запретить(ОписаниеПоля, ЗапрещенныеПоля, РазрешенныеПоля)
	
	Если ОписаниеПоля.Запретить И РазрешенныеПоля.Найти(ОписаниеПоля.Путь) = Неопределено Тогда
		
		ЗапрещенныеПоля.Добавить(ОписаниеПоля.Путь);
		
	ИначеЕсли ОписаниеПоля.ЗапретитьПодчиненные ИЛИ ОписаниеПоля.ЗапретитьПодчиненныеТаблицы Тогда
		
		Для Каждого ПодчиненноеПоле Из ОписаниеПоля.ДоступноеПоле.Элементы Цикл
			
			Если ОписаниеПоля.ЗапретитьПодчиненные 
				ИЛИ ПодчиненноеПоле.Таблица Тогда
				
				ЗапрещенныеПоляСписка_ДобавитьПоле(ЗапрещенныеПоля, ПодчиненноеПоле.Поле);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Возврат;
	
	КонецЕсли;
		
КонецПроцедуры

// sonar: VariablesWithNot
Функция ЗапрещенныеПоляСписка_ПолеИндексируемое(ОписаниеПоля)
	
	Если ОписаниеПоля.Индексируемое = Неопределено Тогда
		ОсновнаяТаблица   = ОписаниеПоля.Список.ОсновнаяТаблица;
		ИндексируемыеПоля = ИТМ_АдминистрированиеДинамическихСписковПовтИсп.ИндексируемыеПоляМетаданных(ОсновнаяТаблица);
		ОписаниеПоля.Индексируемое = ИндексируемыеПоля.Найти(ОписаниеПоля.Путь) <> Неопределено;
	КонецЕсли;
	
	Возврат ОписаниеПоля.Индексируемое;
		
КонецФункции

// Запрещенные поля списка поле ссылочное.
// 
// Параметры:
//  ОписаниеПоля - см. ЗапрещенныеПоляСписка_ОписаниеПоля
// 
// Возвращаемое значение:
//  Булево
Функция ЗапрещенныеПоляСписка_ПолеСсылочное(ОписаниеПоля)
	
	Если ОписаниеПоля.Ссылочное = Неопределено Тогда
		ТипыПоля = ЗапрещенныеПоляСписка_ТипыПоля(ОписаниеПоля);
		ОписаниеПоля.Ссылочное = СредиТиповЕстьСсылочный(ТипыПоля);
	КонецЕсли;
	
	Возврат ОписаниеПоля.Ссылочное;
		
КонецФункции

// Запрещенные поля списка поле составное.
// 
// Параметры:
//  ОписаниеПоля - см. ЗапрещенныеПоляСписка_ОписаниеПоля
// 
// Возвращаемое значение:
//  Булево
Функция ЗапрещенныеПоляСписка_ПолеСоставное(ОписаниеПоля)
	
	Если ОписаниеПоля.Составное = Неопределено Тогда
		ТипыПоля = ЗапрещенныеПоляСписка_ТипыПоля(ОписаниеПоля);
		ОписаниеПоля.Составное = ТипыПоля.Количество() > 1;
	КонецЕсли;
	
	Возврат ОписаниеПоля.Составное;
		
КонецФункции

// Запрещенные поля списка типы поля.
// 
// Параметры:
//  ОписаниеПоля - см. ЗапрещенныеПоляСписка_ОписаниеПоля
// 
// Возвращаемое значение:
//  Массив из Тип
Функция ЗапрещенныеПоляСписка_ТипыПоля(ОписаниеПоля)
	
	Если ОписаниеПоля.Типы = Неопределено Тогда
		ОписаниеПоля.Типы = ОписаниеПоля.ДоступноеПоле.ТипЗначения.Типы();
	КонецЕсли;
	
	Возврат ОписаниеПоля.Типы;
		
КонецФункции

#КонецОбласти

#Область ОтключениеПользовательскихНастроек

// Отключить пользовательские настройки при открытии.
// 
// Параметры:
//  НастройкиСписка - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонПараметровДинамическогоСписка
//  ПользовательскиеНастройки - ПользовательскиеНастройкиКомпоновкиДанных - Пользовательские настройки
Процедура ОтключитьПользовательскиеНастройкиПриОткрытии(НастройкиСписка, ПользовательскиеНастройки)
	
	Для Каждого ЭлементНастроек Из ПользовательскиеНастройки.Элементы Цикл
		
		ИсточникНастроек = ОтключитьПользовательскиеНастройкиПриОткрытии_Источник(НастройкиСписка, ЭлементНастроек);
		
		Если ИсточникНастроек <> Неопределено
			И ТипЗнч(ИсточникНастроек.ОтключатьПользовательскиеНастройкиПриОткрытии) = Тип("Булево")
			И ИсточникНастроек.ОтключатьПользовательскиеНастройкиПриОткрытии Тогда
			
			КоллекцияИсключений = Новый Массив; //Массив из ПолеКомпоновкиДанных
			Для Каждого ИмяПоля Из ИсточникНастроек.ИсключенияОтключенияПользовательскихНастроек Цикл
				КоллекцияИсключений.Добавить(Новый ПолеКомпоновкиДанных(ИмяПоля));
			КонецЦикла;
					
			ОтключитьПользовательскиеНастройки(ЭлементНастроек, КоллекцияИсключений);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Отключить пользовательские настройки при открытии настройки.
// 
// Параметры:
//  НастройкиСписка - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонПараметровДинамическогоСписка
//  ЭлементНастроек - ГруппировкаТаблицыКомпоновкиДанных, ДиаграммаКомпоновкиДанных, ОтборКомпоновкиДанных, ВыбранныеПоляКомпоновкиДанных, СтруктураНастроекКомпоновкиДанных, ЭлементУсловногоОформленияКомпоновкиДанных, ГруппировкаКомпоновкиДанных, ГруппировкаДиаграммыКомпоновкиДанных, НастройкиВложенногоОбъектаКомпоновкиДанных, ЗначениеПараметраНастроекКомпоновкиДанных, ЭлементОтбораКомпоновкиДанных, ПорядокКомпоновкиДанных, УсловноеОформлениеКомпоновкиДанных, ТаблицаКомпоновкиДанных, ГруппаЭлементовОтбораКомпоновкиДанных - Элемент настроек
// 
// Возвращаемое значение:
//  см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонОписанияОграничений
Функция ОтключитьПользовательскиеНастройкиПриОткрытии_Настройки(НастройкиСписка, ЭлементНастроек)
	
	ТипЭлемента = ТипЗнч(ЭлементНастроек);
	Если ТипЭлемента = Тип("ОтборКомпоновкиДанных") Тогда
		ТекущиеНастройки = НастройкиСписка.Отбор;
	ИначеЕсли ТипЭлемента = Тип("СтруктураНастроекКомпоновкиДанных") Тогда
		ТекущиеНастройки   = НастройкиСписка.Группировка;
	ИначеЕсли ТипЭлемента = Тип("ПорядокКомпоновкиДанных") Тогда
		ТекущиеНастройки = НастройкиСписка.Сортировка;
	ИначеЕсли ТипЭлемента = Тип("УсловноеОформлениеКомпоновкиДанных") Тогда
		ТекущиеНастройки = НастройкиСписка.УсловноеОформление;
	Иначе
		ТекущиеНастройки = Неопределено;
	КонецЕсли;
	
	Возврат ТекущиеНастройки;
	
КонецФункции

// Отключить пользовательские настройки при открытии источник.
// 
// Параметры:
//  НастройкиСписка - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонПараметровДинамическогоСписка
//  ЭлементНастроек - ГруппировкаТаблицыКомпоновкиДанных, ДиаграммаКомпоновкиДанных, ОтборКомпоновкиДанных, ВыбранныеПоляКомпоновкиДанных, СтруктураНастроекКомпоновкиДанных, ЭлементУсловногоОформленияКомпоновкиДанных, ГруппировкаКомпоновкиДанных, ГруппировкаДиаграммыКомпоновкиДанных, НастройкиВложенногоОбъектаКомпоновкиДанных, ЗначениеПараметраНастроекКомпоновкиДанных, ЭлементОтбораКомпоновкиДанных, ПорядокКомпоновкиДанных, УсловноеОформлениеКомпоновкиДанных, ТаблицаКомпоновкиДанных, ГруппаЭлементовОтбораКомпоновкиДанных - Элемент настроек
// 
// Возвращаемое значение:
//  Структура
Функция ОтключитьПользовательскиеНастройкиПриОткрытии_Источник(НастройкиСписка, ЭлементНастроек)
	
	ТекущиеНастройки = ОтключитьПользовательскиеНастройкиПриОткрытии_Настройки(НастройкиСписка, ЭлементНастроек);

	Если ТекущиеНастройки = Неопределено Тогда
		ИсточникНастроек = Неопределено;
	ИначеЕсли ТекущиеНастройки.Использование И ТекущиеНастройки.ОтключатьПользовательскиеНастройкиПриОткрытии
		<> Неопределено Тогда
		ИсточникНастроек = ТекущиеНастройки;
	Иначе
		ИсточникНастроек = НастройкиСписка.Основные;
	КонецЕсли;

	Возврат ИсточникНастроек;
	
КонецФункции

#КонецОбласти

#Область ОбработкаПользовательскихНастроек
	
// Установить период списка при открытии.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  ОбщиеНастройки - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.НастройкиНаФорме
//  НастройкиСписка - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонПараметровДинамическогоСписка
//  Элемент - ТаблицаФормы - Элемент формы
Процедура УстановитьПериодСпискаПриОткрытии(Форма, ОбщиеНастройки, НастройкиСписка, Элемент)
	
	Период = НастройкиСписка.Основные.УстанавливатьПериодПриОткрытии;
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока  = Неопределено;
	Если Форма.Параметры.Свойство("ТекущаяСтрока", ТекущаяСтрока) 
		И ЗначениеЗаполнено(ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСвойство(Элемент, "Период", Период);
		
КонецПроцедуры

// Удалить недоступные поля из настроек.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  НастройкиСписка - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонПараметровДинамическогоСписка
//  ПользовательскиеНастройки - НастройкиКомпоновкиДанных, ПользовательскиеНастройкиКомпоновкиДанных - Пользовательские настройки
Процедура УдалитьНедоступныеПоляИзНастроек(Форма, НастройкиСписка, ПользовательскиеНастройки)
	
	Если НЕ НастройкиСписка.Основные.УдалятьНедоступныеПоляНастроек Тогда
		Возврат;
	КонецЕсли;
	
	Список = ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.РеквизитСписокПоНастройкам(Форма, НастройкиСписка);
	Если Список = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьНедоступныеЭлементыНастроек(ПользовательскиеНастройки.Элементы);
	
КонецПроцедуры

// Удалить недоступные элементы настроек.
// 
// Параметры:
//  Коллекция - КоллекцияЭлементовПользовательскихНастроекКомпоновкиДанных, КоллекцияВыбранныхПолейКомпоновкиДанных, КоллекцияЭлементовОтбораКомпоновкиДанных - Коллекция
//  ДоступныеПоля - ДоступныеПоляКомпоновкиДанных, Неопределено - Доступные поля
Процедура УдалитьНедоступныеЭлементыНастроек(Коллекция, ДоступныеПоля = Неопределено)
	
	УдаляемыеЭлементы = Новый Массив; //Массив из см. УдалитьНедоступныеЭлементыНастроек_ОбработатьДанные.ТекущиеДанные
	
	Для Каждого ТекущиеДанные Из Коллекция Цикл
		
		УдалитьНедоступныеЭлементыНастроек_ОбработатьДанные(ТекущиеДанные, ДоступныеПоля, УдаляемыеЭлементы);
		
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Коллекция.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
КонецПроцедуры

// Удалить недоступные элементы настроек обработать данные.
// 
// Параметры:
//  ТекущиеДанные - ОтборКомпоновкиДанных, ГруппаЭлементовОтбораКомпоновкиДанных, ЭлементОтбораКомпоновкиДанных, ПорядокКомпоновкиДанных - 
//  ДоступныеПоля - ДоступныеПоляКомпоновкиДанных, Неопределено - Доступные поля
//  УдаляемыеЭлементы - Массив из ОтборКомпоновкиДанных - Удаляемые элементы
Процедура УдалитьНедоступныеЭлементыНастроек_ОбработатьДанные(ТекущиеДанные, ДоступныеПоля, УдаляемыеЭлементы)
	
	ТипТекущихДанных = ТипЗнч(ТекущиеДанные);

	Если ТипТекущихДанных = Тип("ОтборКомпоновкиДанных") Тогда

		УдалитьНедоступныеЭлементыНастроек(ТекущиеДанные.Элементы, ТекущиеДанные.ДоступныеПоляОтбора);

	ИначеЕсли ТипТекущихДанных = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда

		УдалитьНедоступныеЭлементыНастроек(ТекущиеДанные.Элементы, ДоступныеПоля);

	ИначеЕсли ДоступныеПоля = Неопределено Тогда
			
			//Это элемент основной коллекции, которую мы не можем обработать

	ИначеЕсли ТипТекущихДанных = Тип("ЭлементОтбораКомпоновкиДанных") Тогда

		УдалитьНедоступныеЭлементыНастроек_ОбработатьЭлементОтбора(ТекущиеДанные, ДоступныеПоля, УдаляемыеЭлементы);

	ИначеЕсли ТипТекущихДанных = Тип("ПорядокКомпоновкиДанных") Тогда

		УдалитьНедоступныеЭлементыНастроек(ТекущиеДанные.Элементы, ТекущиеДанные.ДоступныеПоляПорядка);

	КонецЕсли;
	
КонецПроцедуры

// Удалить недоступные элементы настроек обработать элемент отбора.
// 
// Параметры:
//  ТекущиеДанные - ЭлементОтбораКомпоновкиДанных
//  ДоступныеПоля - ДоступныеПоляКомпоновкиДанных, Неопределено - Доступные поля
//  УдаляемыеЭлементы - Массив из ЭлементОтбораКомпоновкиДанных
Процедура УдалитьНедоступныеЭлементыНастроек_ОбработатьЭлементОтбора(ТекущиеДанные, ДоступныеПоля, УдаляемыеЭлементы)
	
	ИменаСвойств = "ЛевоеЗначение,ПравоеЗначение";
	Для Каждого ИмяСвойства Из СтрРазделить(ИменаСвойств, ",") Цикл

		ТекущееПоле = ТекущиеДанные[ИмяСвойства]; //ПолеКомпоновкиДанных
		Если ТипЗнч(ТекущееПоле) = Тип("ПолеКомпоновкиДанных") 
			И ДоступныеПоля.НайтиПоле(ТекущееПоле) = Неопределено Тогда

			УдаляемыеЭлементы.Добавить(ТекущиеДанные);
			Прервать;

		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

// Отключить пользовательские настройки.
// 
// Параметры:
//  ТекущееЗначение - ЭлементОтбораКомпоновкиДанных, ЭлементПорядкаКомпоновкиДанных, ГруппировкаКомпоновкиДанных, ЭлементУсловногоОформленияКомпоновкиДанных - 
//  ИсключенияОтключения - Массив из ПолеКомпоновкиДанных - Исключения отключения
Процедура ОтключитьПользовательскиеНастройки(ТекущееЗначение, ИсключенияОтключения)
	
	КоллекцияЭлементов = ОтключитьПользовательскиеНастройки_КоллекцияЭлементов(ТекущееЗначение);
	Если КоллекцияЭлементов = Неопределено Тогда
		
		Если ОтключитьПользовательскиеНастройки_НеобходимоОтключить(ТекущееЗначение, ИсключенияОтключения) Тогда
			ОтключитьПользовательскиеНастройки_ОтключитьЭлемент(ТекущееЗначение);
		КонецЕсли;
		
	Иначе
		
		Для Каждого ЭлементНастройки Из КоллекцияЭлементов Цикл
			ОтключитьПользовательскиеНастройки(ЭлементНастройки, ИсключенияОтключения);
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

// Отключить пользовательские настройки необходимо отключить.
// 
// Параметры:
//  ТекущееЗначение - см. ОтключитьПользовательскиеНастройки.ТекущееЗначение
//  ИсключенияОтключения - см. ОтключитьПользовательскиеНастройки.ИсключенияОтключения
// 
// Возвращаемое значение:
//  Булево
Функция ОтключитьПользовательскиеНастройки_НеобходимоОтключить(ТекущееЗначение, ИсключенияОтключения)
	
	ТипЗначения    = ТипЗнч(ТекущееЗначение);
	
	Если ТипЗначения = Тип("ЭлементОтбораКомпоновкиДанных") Тогда

		НеобходимоОтключить = ОтключитьПользовательскиеНастройки_НеобходимоОтключитьЭлементОтбора(
			ТекущееЗначение, ИсключенияОтключения);
		
	ИначеЕсли ТипЗначения = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда

		НеобходимоОтключить = ОтключитьПользовательскиеНастройки_НеобходимоОтключитьЭлементПорядка(
			ТекущееЗначение, ИсключенияОтключения);
		
	ИначеЕсли ТипЗначения = Тип("ГруппировкаКомпоновкиДанных") Тогда

		НеобходимоОтключить = ОтключитьПользовательскиеНастройки_НеобходимоОтключитьГруппировка(
			ТекущееЗначение, ИсключенияОтключения);
		
	ИначеЕсли ТипЗначения = Тип("ЭлементУсловногоОформленияКомпоновкиДанных") Тогда

		НеобходимоОтключить = ОтключитьПользовательскиеНастройки_НеобходимоОтключитьЭлементОформления(
			ТекущееЗначение, ИсключенияОтключения);
			
	Иначе
		
		НеобходимоОтключить = Ложь;
		
	КонецЕсли;

	Возврат НеобходимоОтключить;
	
КонецФункции

// Отключить пользовательские настройки необходимо отключить элемент отбора.
// 
// Параметры:
//  ТекущееЗначение - см. ОтключитьПользовательскиеНастройки.ТекущееЗначение
//  ИсключенияОтключения - см. ОтключитьПользовательскиеНастройки.ИсключенияОтключения
// 
// Возвращаемое значение:
//  Булево
Функция ОтключитьПользовательскиеНастройки_НеобходимоОтключитьЭлементОтбора(
	ТекущееЗначение, ИсключенияОтключения)

	//Баги ЕДТ
	//@skip-check property-return-type
	//@skip-check invocation-parameter-type-intersect
	Если НЕ ТекущееЗначение.Использование Тогда
		НеобходимоОтключить = Ложь;
	ИначеЕсли НЕ ЗначениеЗаполнено(ИсключенияОтключения) Тогда
		НеобходимоОтключить = Истина;
	ИначеЕсли ИсключенияОтключения.Найти(ТекущееЗначение.ЛевоеЗначение) <> Неопределено Тогда
		НеобходимоОтключить = Ложь;
	ИначеЕсли ИсключенияОтключения.Найти(ТекущееЗначение.ПравоеЗначение) <> Неопределено Тогда
		НеобходимоОтключить = Ложь;
	Иначе
		НеобходимоОтключить = Истина;
	КонецЕсли;

	Возврат НеобходимоОтключить;
	
КонецФункции

// Отключить пользовательские настройки необходимо отключить элемент порядка.
// 
// Параметры:
//  ТекущееЗначение - см. ОтключитьПользовательскиеНастройки.ТекущееЗначение
//  ИсключенияОтключения - см. ОтключитьПользовательскиеНастройки.ИсключенияОтключения
// 
// Возвращаемое значение:
//  Булево
Функция ОтключитьПользовательскиеНастройки_НеобходимоОтключитьЭлементПорядка(
	ТекущееЗначение, ИсключенияОтключения)

	Если НЕ ТекущееЗначение.Использование Тогда
		НеобходимоОтключить = Ложь;
	ИначеЕсли ИсключенияОтключения.Найти(ТекущееЗначение.Поле) <> Неопределено Тогда
		НеобходимоОтключить = Ложь;
	Иначе
		НеобходимоОтключить = Истина;
	КонецЕсли;

	Возврат НеобходимоОтключить;
	
КонецФункции

// Отключить пользовательские настройки необходимо отключить элемент группировки.
// 
// Параметры:
//  ТекущееЗначение - см. ОтключитьПользовательскиеНастройки.ТекущееЗначение
//  ИсключенияОтключения - см. ОтключитьПользовательскиеНастройки.ИсключенияОтключения
// 
// Возвращаемое значение:
//  Булево
Функция ОтключитьПользовательскиеНастройки_НеобходимоОтключитьГруппировка(
	ТекущееЗначение, ИсключенияОтключения)

	Если НЕ ТекущееЗначение.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.Включен Тогда
		НеобходимоОтключить = Ложь;
	Иначе
		НеобходимоОтключить = Истина;
		Для Каждого ТекущееПоле Из ТекущееЗначение.ПоляГруппировки.Элементы Цикл
			Если ИсключенияОтключения.Найти(ТекущееПоле.Поле) <> Неопределено Тогда
				НеобходимоОтключить = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат НеобходимоОтключить;
	
КонецФункции

// Отключить пользовательские настройки необходимо отключить элемент оформления.
// 
// Параметры:
//  ТекущееЗначение - см. ОтключитьПользовательскиеНастройки.ТекущееЗначение
//  ИсключенияОтключения - см. ОтключитьПользовательскиеНастройки.ИсключенияОтключения
// 
// Возвращаемое значение:
//  Булево
Функция ОтключитьПользовательскиеНастройки_НеобходимоОтключитьЭлементОформления(
	ТекущееЗначение, ИсключенияОтключения)

	Если НЕ ТекущееЗначение.Использование Тогда
		НеобходимоОтключить = Ложь;
	Иначе
		НеобходимоОтключить = Истина;
		Для Каждого ТекущееПоле Из ТекущееЗначение.Поля.Элементы Цикл
			Если ТекущееПоле.Использование 
				И ИсключенияОтключения.Найти(ТекущееПоле.Поле) <> Неопределено Тогда
				НеобходимоОтключить = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат НеобходимоОтключить;
	
КонецФункции

// Отключить пользовательские настройки коллекция элементов.
// 
// Параметры:
//  ТекущееЗначение - см. ОтключитьПользовательскиеНастройки.ТекущееЗначение
// 
// Возвращаемое значение:
//  Неопределено, КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных, КоллекцияЭлементовОтбораКомпоновкиДанных, КоллекцияЭлементовПорядкаКомпоновкиДанных - 
Функция ОтключитьПользовательскиеНастройки_КоллекцияЭлементов(ТекущееЗначение)
	
	ТипЗнч = ТипЗнч(ТекущееЗначение);
	
	КоллекцияЭлементов = Неопределено; //см. ОтключитьПользовательскиеНастройки_КоллекцияЭлементов
	
	Если ОтключитьПользовательскиеНастройки_КоллекцияЭлементовСодержитЭлементы(ТипЗнч) Тогда
		
		КоллекцияЭлементов = ТекущееЗначение.Элементы;
		
	ИначеЕсли ТипЗнч = Тип("СтруктураНастроекКомпоновкиДанных") Тогда
		
		КоллекцияЭлементов = ТекущееЗначение.Структура;
		
	КонецЕсли;
	
	Возврат КоллекцияЭлементов;
	
КонецФункции

// Отключить пользовательские настройки коллекция элементов содержит элементы.
// 
// Параметры:
//  ТипЗнч - Тип - Тип знч
// 
// Возвращаемое значение:
//  Булево
Функция ОтключитьПользовательскиеНастройки_КоллекцияЭлементовСодержитЭлементы(ТипЗнч)
	
	Возврат ТипЗнч = Тип("ПользовательскиеНастройкиКомпоновкиДанных")
		ИЛИ ТипЗнч = Тип("ОтборКомпоновкиДанных")
		ИЛИ ТипЗнч = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
		ИЛИ ТипЗнч = Тип("ВыбранныеПоляКомпоновкиДанных")
		ИЛИ ТипЗнч = Тип("УсловноеОформлениеКомпоновкиДанных")
		ИЛИ ТипЗнч = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных")
		ИЛИ ТипЗнч = Тип("ПорядокКомпоновкиДанных");
	
КонецФункции

// Отключить пользовательские настройки отключить элемент.
// 
// Параметры:
//  ТекущееЗначение - см. ОтключитьПользовательскиеНастройки.ТекущееЗначение
Процедура ОтключитьПользовательскиеНастройки_ОтключитьЭлемент(ТекущееЗначение)
	
	ТекущееЗначение.Использование = Ложь;
	Если ТипЗнч(ТекущееЗначение) = Тип("ГруппировкаКомпоновкиДанных") Тогда
		ТекущееЗначение.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.Отключен;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеНастроек

//см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.НастройкиНаФорме
Функция НастройкиНаФорме(ФормаИлиНастройки)
	
	Возврат ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.НастройкиНаФорме(ФормаИлиНастройки);
		
КонецФункции

// Добавить реквизит формы настройки динамических списков.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры
Процедура ДобавитьРеквизитФормыНастройкиДинамическихСписков(Форма, ДополнительныеПараметры)
	
	ИмяРеквизита = ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ИмяРеквизитаФормыНастроек();
	Структура = Новый Структура(ИмяРеквизита, Null);
	ЗаполнитьЗначенияСвойств(Структура, Форма);
	Если Структура[ИмяРеквизита] = Null Тогда
		ДобавляемыеРеквизиты = Новый Массив; //Массив из РеквизитФормы
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов));
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;
	
	Форма[ИмяРеквизита] = ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонПараметровНаФорме();
	
КонецПроцедуры

// Заполнить настройки на форме.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры
Процедура ЗаполнитьНастройкиНаФорме(Форма, ДополнительныеПараметры)
	
	ОбщиеНастройки  = НастройкиНаФорме(Форма);
	ОбщиеНастройки.КлючФормы = Форма.ИмяФормы;
	ОбщиеНастройки.ДополнительныеПараметры = ДополнительныеПараметры;
	
	ЗаполнитьПараметрыОтладкиОбщихНастроек(Форма, ОбщиеНастройки);
	
	ЗаполнитьНастройкиДинамическихСписковНаФорме(Форма, ОбщиеНастройки);
		
КонецПроцедуры

// Заполнить параметры отладки общих настроек.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  ОбщиеНастройки - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.НастройкиНаФорме
Процедура ЗаполнитьПараметрыОтладкиОбщихНастроек(Форма, ОбщиеНастройки)
	
	ПараметрыОтладкиФормы = Неопределено;
	КлючПараметровОтладки = ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ИмяПараметровОтладкиНаФорме();
	
	Если Форма.Параметры.Свойство(КлючПараметровОтладки, ПараметрыОтладкиФормы) 
		И ТипЗнч(ПараметрыОтладкиФормы) = Тип("Структура") Тогда
		
		Для Каждого КлючИЗначение Из ПараметрыОтладкиФормы Цикл
			ТекущийКлюч = КлючИЗначение.Ключ; //Строка
			ОбщиеНастройки.ПараметрыОтладки.Вставить(ТекущийКлюч, КлючИЗначение.Значение);
		КонецЦикла;
			
	КонецЕсли;
	
КонецПроцедуры

// Заполнить настройки динамических списков на форме.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  ОбщиеНастройки - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.НастройкиНаФорме
Процедура ЗаполнитьНастройкиДинамическихСписковНаФорме(Форма, ОбщиеНастройки)
	
	УстановитьПривилегированныйРежим(Истина);
	
    ИменаЭлементовДС = ЭлементыДинамическиеСпискиНаФорме(Форма);
	Для Каждого ИмяЭлементаДС Из ИменаЭлементовДС Цикл
		
		ЭлементФормы = Форма.Элементы.Найти(ИмяЭлементаДС);
		Если ЭлементФормы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КлючСписка  = ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ИмяКлючаДинамическогоСпискаФормы(
						ОбщиеНастройки, ИмяЭлементаДС);
		
		НастройкиДС = РегистрыСведений.ИТМ_НастройкиДинамическихСписков.НастройкиСписка(КлючСписка);
		НастройкиДС.Вставить("ИмяЭлемента" , ИмяЭлементаДС);
		НастройкиДС.Вставить("ИмяРеквизита", ЭлементФормы.ПутьКДанным);
		НастройкиДС.Вставить("ПараметрыОтладки", ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонПараметровОтладки());
		
		ПараметрыОтладки = Неопределено;
		Если ОбщиеНастройки.ПараметрыОтладки.Свойство(ИмяЭлементаДС, ПараметрыОтладки)
			И ТипЗнч(ПараметрыОтладки) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(НастройкиДС.ПараметрыОтладки, ПараметрыОтладки);
		КонецЕсли;
		
		ОбщиеНастройки.Настройки.Вставить(ИмяЭлементаДС, НастройкиДС);
		
	КонецЦикла;
	
КонецПроцедуры

// Выборка нормализации наименования ключевых операций.
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - :
//  * Ссылка - СправочникСсылка.КлючевыеОперации
//  * Имя - Строка
//  * Наименование - Строка
Функция ВыборкаНормализацииНаименованияКлючевыхОпераций()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ссылка, Имя, Наименование
	|ИЗ
	|	Справочник.КлючевыеОперации
	|ГДЕ
	|	Имя ПОДОБНО ""%"" + &Разделитель + ""%""";
	Запрос.УстановитьПараметр("Разделитель", ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.РазделительФормыИЭлемента());
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

#КонецОбласти

#Область Вспомогательные
	
// Элементы динамические списки на форме.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
// 
// Возвращаемое значение:
//  Массив из Строка
Функция ЭлементыДинамическиеСпискиНаФорме(Форма)
	
	ЭлементыТаблицы  = ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ЭлементыТаблицыНаФорме(Форма.Элементы);
	ИменаЭлементовДС = Новый Массив; //Массив из Строка
	
	ТипДинамическийСписок = Тип("ДинамическийСписок");
	Для Каждого ЭлементТаблицыФормы Из ЭлементыТаблицы Цикл
		
		Попытка
			
			ПутьКРеквизиту = ЭлементТаблицыФормы.ПутьКДанным;
			
			ВременнаяСтруктура = Новый Структура;
			ВременнаяСтруктура.Вставить(СтрЗаменить(ПутьКРеквизиту, ".", "_")); //Проверка от инъекций
			
			//@skip-check server-execution-safe-mode
			РеквизитФормы = Вычислить("Форма." + ПутьКРеквизиту);
			
		Исключение
			
			РеквизитФормы = Неопределено;
			
		КонецПопытки;
		
		Если ТипЗнч(РеквизитФормы) = ТипДинамическийСписок Тогда
			ИменаЭлементовДС.Добавить(ЭлементТаблицыФормы.Имя);
		КонецЕсли;
		
	КонецЦикла;

	Возврат ИменаЭлементовДС;
	
КонецФункции

// Среди типов есть ссылочный.
// 
// Параметры:
//  Типы - Массив из Тип
// 
// Возвращаемое значение:
//  Булево
Функция СредиТиповЕстьСсылочный(Типы)
	
	Для Каждого ТекущийТип Из Типы Цикл
		Если ОбщегоНазначения.ЭтоСсылка(ТекущийТип) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
		
КонецФункции

// см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.УстановитьСвойство
Процедура УстановитьСвойство(Объект, ИмяСвойства, Значение)
	
	ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.УстановитьСвойство(Объект, ИмяСвойства, Значение);
	
КонецПроцедуры

// Полный путь к полю.
// 
// Параметры:
//  Поле - Строка - Поле
//  Родитель - Строка - Родитель
// 
// Возвращаемое значение:
//  Строка
Функция ПолныйПутьКПолю(Поле, Родитель)
	
	Возврат ?(ПустаяСтрока(Родитель), "", Родитель + ".") + Поле;
		
КонецФункции

// Это открытие формы.
// 
// Параметры:
//  НастройкиНаФорме - см. Настройк
// 
// Возвращаемое значение:
//  Булево - Это открытие формы
Функция ЭтоОткрытиеФормы(Знач НастройкиНаФорме = Неопределено)
	
	НастройкиНаФорме = НастройкиНаФорме(НастройкиНаФорме);
	
	Возврат НЕ НастройкиНаФорме.ФормаОткрыта;
	
КонецФункции

// Роли без ограничений доступны.
// 
// Параметры:
//  НастройкиОграничений - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонОписанияОграничений
//   
// Возвращаемое значение:
//  Булево - Роли без ограничений доступны
Функция РолиБезОграниченийДоступны(НастройкиОграничений)

	Перем СписокРолей; //СписокЗначений
	
	Если НастройкиОграничений.Свойство("РолиПользователейБезОграничений", СписокРолей) 
		И ТипЗнч(СписокРолей) = Тип("СписокЗначений")
		И ЗначениеЗаполнено(СписокРолей) Тогда
		
		МассивИменРолей = СписокРолей.ВыгрузитьЗначения();
		
		Возврат Пользователи.РолиДоступны(СтрСоединить(МассивИменРолей));
		
	Иначе
		
		Возврат Ложь;
	
	КонецЕсли;

КонецФункции

// Редактор настроек заполнить список исключений.
// 
// Параметры:
//  Список - СписокЗначений из Строка - Список
//  Значения - Массив из Строка, Строка - Значения
Процедура РедакторНастроек_ЗаполнитьСписокИсключений(Список, Значения)
	
	Если ТипЗнч(Значения) = Тип("Массив") Тогда
		ЗначенияМассив = Значения; //Массив из Строка
	Иначе
		ЗначенияМассив = СтрРазделить(Значения, "," + Символы.ПС, Ложь);
	КонецЕсли;
	
	Для Каждого Элемент Из ЗначенияМассив Цикл
		ТекущееЗначение = СокрЛП(Элемент);
		Если НЕ ПустаяСтрока(ТекущееЗначение) Тогда
			Список.Добавить(ТекущееЗначение, ТекущееЗначение, Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Сравнить значения.
// 
// Параметры:
//  Значение1 - Произвольный - Значение1
//  ВидСравненияЗначений - ВидСравненияКомпоновкиДанных - Вид сравнения значений
//  Значение2 - Произвольный - Значение2
// 
// Возвращаемое значение:
//  Булево
Функция СравнитьЗначения(Значение1, ВидСравненияЗначений, Значение2)
	
	РезультатСравнения = Ложь;
	
	Если ВидСравненияЗначений = ВидСравненияКомпоновкиДанных.Равно Тогда
		РезультатСравнения = (Значение1 = Значение2);
	ИначеЕсли ВидСравненияЗначений = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		РезультатСравнения = НЕ СравнитьЗначения(Значение1, ВидСравненияКомпоновкиДанных.Равно, Значение2);
	ИначеЕсли ВидСравненияЗначений = ВидСравненияКомпоновкиДанных.Больше Тогда
		РезультатСравнения = (Значение1 > Значение2);
	ИначеЕсли ВидСравненияЗначений = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
		РезультатСравнения = (Значение1 >= Значение2);
	ИначеЕсли ВидСравненияЗначений = ВидСравненияКомпоновкиДанных.Меньше Тогда
		РезультатСравнения = (Значение1 < Значение2);
	ИначеЕсли ВидСравненияЗначений = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
		РезультатСравнения = (Значение1 <= Значение2);
	ИначеЕсли ВидСравненияЗначений = ВидСравненияКомпоновкиДанных.ВСписке Тогда
		Если ТипЗнч(Значение2) = Тип("Массив") Тогда
			РезультатСравнения = (Значение1 = Значение2 И Значение2.Найти(Значение1) <> Неопределено);
		КонецЕсли;
	ИначеЕсли ВидСравненияЗначений = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		РезультатСравнения = НЕ СравнитьЗначения(Значение1, ВидСравненияКомпоновкиДанных.ВСписке, Значение2);
	Иначе
		РезультатСравнения = СравнитьЗначенияЗаполнено(Значение1, ВидСравненияЗначений);
	КонецЕсли;
	
	Возврат РезультатСравнения;
	
КонецФункции

// см. СравнитьЗначения
Функция СравнитьЗначенияЗаполнено(Значение1, ВидСравненияЗначений)
	
	ЗначениеЗаполнено = ЗначениеЗаполнено(Значение1);
	Если ВидСравненияЗначений = ВидСравненияКомпоновкиДанных.Заполнено Тогда
		РезультатСравнения = ЗначениеЗаполнено;
	ИначеЕсли ВидСравненияЗначений = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
		РезультатСравнения = НЕ ЗначениеЗаполнено;
	Иначе
		РезультатСравнения = Ложь;
	КонецЕсли;
	
	Возврат РезультатСравнения;
	
КонецФункции	

#КонецОбласти

#КонецОбласти
