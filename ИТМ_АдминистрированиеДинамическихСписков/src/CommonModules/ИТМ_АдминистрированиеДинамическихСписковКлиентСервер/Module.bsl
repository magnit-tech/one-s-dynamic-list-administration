// @strict-types

#Область СлужебныйПрограммныйИнтерфейс

#Область ШаблоныПараметров
	
// Функция возвращает пустую структуру с реквизитом на форме списка
// 
// Возвращаемое значение:
//  Структура - Шаблон параметров на форме:
// * КлючФормы               - Строка - Ключ формы со списком
// * Настройки               - Структура из КлючИЗначение:
// ** Ключ                   - Строка
// ** Значение               - см. ШаблонПараметровДинамическогоСписка
// * ФормаОткрыта            - Булево - Служебное свойство. Открыта ли текущая форма
// * Отказ                   - Булево - Служебное свойство. Отказ открытия формы
// * ТекстЗапретаОткрытия    - Строка - Служебное свойство. Текст запрета открытия формы
// * ПараметрыОтладки        - см. ШаблонПараметровОтладки
// * ДополнительныеПараметры - Структура - Набор произвольных значений
Функция ШаблонПараметровНаФорме() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КлючФормы", "");
	Результат.Вставить("Настройки", Новый Структура);
	
	Результат.Вставить("ФормаОткрыта", Ложь);
	
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("ТекстЗапретаОткрытия", "");
	
	Результат.Вставить("ПараметрыОтладки", Новый Структура); //Структура, которая приходит через Форма.Параметры
	
	Результат.Вставить("ДополнительныеПараметры", Новый Структура);
	
	Возврат Результат;
		
КонецФункции

// Шаблон параметров динамического списка.
// 
// Возвращаемое значение:
//  Структура - Шаблон параметров динамического списка:
// * КлючСписка             - Неопределено, Строка, СправочникСсылка.КлючевыеОперации - Ключ формы списка
// * Использование          - Булево - Использование настроек списка
// * ИмяЭлемента            - Строка - Имя элемента формы
// * ИмяРеквизита           - Строка - Имя реквизита формы
// * ПараметрыОтладки       - см. ШаблонПараметровОтладки
// * ДополнительныеЗначения - Соответствие из Произвольный - Произвольные значения
// * Основные               - см. ШаблонОписанияОсновныхНастроек
// * ЗапретыОткрытия        - см. ШаблонОписанияЗапретовОткрытия
// * Источник               - см. ШаблонОписанияНастроекИсточника
// * ИсторияОбновления      - см. ШаблонНастроекИсторииОбновления
// * Отбор                  - см. ШаблонОписанияОграничений
// * Сортировка             - см. ШаблонОписанияОграничений
// * Группировка            - см. ШаблонОписанияОграничений
// * УсловноеОформление     - см. ШаблонОписанияОграничений
Функция ШаблонПараметровДинамическогоСписка() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("КлючСписка", Неопределено);
	Результат.Вставить("Использование", Ложь);
	
	Результат.Вставить("ИмяЭлемента", "");
	Результат.Вставить("ИмяРеквизита", "");
	Результат.Вставить("ПараметрыОтладки", ШаблонПараметровОтладки());
	
	Результат.Вставить("Основные"           , ШаблонОписанияОсновныхНастроек());
	Результат.Вставить("ЗапретыОткрытия"    , ШаблонОписанияЗапретовОткрытия());
	Результат.Вставить("Источник"           , ШаблонОписанияНастроекИсточника());
	Результат.Вставить("ИсторияОбновления"  , ШаблонНастроекИсторииОбновления());
	Результат.Вставить("Отбор"              , ШаблонОписанияОграничений());
	Результат.Вставить("Сортировка"         , ШаблонОписанияОграничений());
	Результат.Вставить("Группировка"        , ШаблонОписанияОграничений());
	Результат.Вставить("УсловноеОформление" , ШаблонОписанияОграничений());
	
	Результат.Вставить("ДополнительныеЗначения", Новый Соответствие);
	
	Возврат Результат;
		
КонецФункции

// Шаблон описания ограничений.
// 
// Возвращаемое значение:
//  Структура - Шаблон описания ограничений:
// * Использование - Булево - Используются ли ограничения
// * РолиПользователейБезОграничений               - Неопределено, СписокЗначений из Строка - Роли, которые будут игнорировать ограничения
// * ИсключитьИзНастройкиСписка                    - Булево - Требуется ли исключить пункт меню из "Настроить список"
// * ЗапрещатьПоВсемПолям                          - Булево - Запрещать использование всех полей
// * ДополнительноРазрешенные                      - Неопределено, СписокЗначений из Строка - Поля, которые разрешено использовать
// * ДополнительноЗапрещенные                      - Неопределено, СписокЗначений из Строка - Поля, которые запрещено использовать
// * ЗапрещатьПоТаблицам                           - Булево - Запрет использования по таблицам
// * ЗапрещатьПоПодчиненным                        - Булево - Запрет использования подчиненных
// * ЗапрещатьПоПодчиненнымТаблицам                - Булево - Запрет использования подключиненных таблиц
// * ЗапрещатьПоСоставным                          - Булево - Запрет использования составных полей
// * ЗапрещатьПоПодчиненнымСоставных               - Булево - Запрет использования подчиненных полей составных полей
// * ЗапрещатьПоСсылочным                          - Булево - Запрет использования ссылочных полей
// * ЗапрещатьПоНеИндексируемым                    - Булево - Запрет использования НЕ индексированных полей
// * ЗапрещатьПоПодчиненнымНеИндексируемых         - Булево - Запрет использования подчиненных не индексируемых полей
// * ОтключатьПользовательскиеНастройкиПриОткрытии - Неопределено, Булево - Требуется ли отключать пользовательские настройки при открытии 
// 		При Неопределено берется общее значение для списка.
// * ИсключенияОтключенияПользовательскихНастроек  - Неопределено, СписокЗначений из Строка - Исключения отключения при открытии. 
// 		При Неопределено берется общее значение для списка.
Функция ШаблонОписанияОграничений() Экспорт
	
	Шаблон = Новый Структура;
	
	Шаблон.Вставить("Использование"                , Ложь);
	Шаблон.Вставить("РолиПользователейБезОграничений", Неопределено);
	Шаблон.Вставить("ИсключитьИзНастройкиСписка"   , Ложь);
	Шаблон.Вставить("ЗапрещатьПоВсемПолям"         , Ложь);
	Шаблон.Вставить("ДополнительноРазрешенные"     , Неопределено);
	Шаблон.Вставить("ДополнительноЗапрещенные"     , Неопределено);
	
	Шаблон.Вставить("ЗапрещатьПоТаблицам"            , Ложь);
	Шаблон.Вставить("ЗапрещатьПоПодчиненным"         , Ложь);
	Шаблон.Вставить("ЗапрещатьПоПодчиненнымТаблицам" , Ложь);
	Шаблон.Вставить("ЗапрещатьПоСоставным"           , Ложь);
	Шаблон.Вставить("ЗапрещатьПоПодчиненнымСоставных", Ложь);
	Шаблон.Вставить("ЗапрещатьПоСсылочным"           , Ложь);
	Шаблон.Вставить("ЗапрещатьПоНеИндексируемым"     , Ложь);
	Шаблон.Вставить("ЗапрещатьПоПодчиненнымНеИндексируемых", Ложь);
	
	Шаблон.Вставить("ОтключатьПользовательскиеНастройкиПриОткрытии", Неопределено);
	Шаблон.Вставить("ИсключенияОтключенияПользовательскихНастроек" , Неопределено);
	
	Возврат Шаблон;
	
КонецФункции

// Шаблон описания основных настроек.
// 
// Возвращаемое значение:
//  Структура - Шаблон описания основных настроек:
// * АвтоОбновление - Неопределено, Булево - Одноименное свойство динамического списка. При Неопределено не переопределяется
// * ПериодАвтоОбновления - Неопределено, Число - Одноименное свойство динамического списка. При Неопределено не переопределяется
// * ФиксироватьИсториюОбновления - Булево - Требуется ли фиксировать историю обновления списка
// * УстанавливатьПериодПриОткрытии - Неопределено, СтандартныйПериод - При открытии формы значение будет устанавливаться в свойство списка "Период"
// * ОтключатьПользовательскиеНастройкиПриОткрытии - Булево - Требуется ли отключать все пользовательские настройки при открытии. Можно донастроить в разделах
// * ИсключенияОтключенияПользовательскихНастроек - Неопределено, СписокЗначений из Строка - Список полей, по которым не будет отключаться настройки
// * УдалятьНедоступныеПоляНастроек - Булево - Требуется ли удалять недоступные для использования поля из настроек. Например, они могут остаться в сохраненных настройках
// * ДинамическоеСчитываниеДанных - Неопределено, Булево - Одноименное свойство динамического списка. При Неопределено не переопределяется
// * АвтоматическоеСохранениеПользовательскихНастроек - Неопределено, Булево - Одноименное свойство динамического списка. При Неопределено не переопределяется
Функция ШаблонОписанияОсновныхНастроек() Экспорт
	
	Основные = Новый Структура;
	
	Основные.Вставить("АвтоОбновление", Неопределено);
	Основные.Вставить("ПериодАвтоОбновления", Неопределено);
	
	Основные.Вставить("ФиксироватьИсториюОбновления", Ложь);
	
	Основные.Вставить("УстанавливатьПериодПриОткрытии", Неопределено);
	
	Основные.Вставить("ОтключатьПользовательскиеНастройкиПриОткрытии", Ложь);
	Основные.Вставить("ИсключенияОтключенияПользовательскихНастроек", Неопределено);
	
	Основные.Вставить("УдалятьНедоступныеПоляНастроек", Ложь);
	Основные.Вставить("ДинамическоеСчитываниеДанных", Неопределено);
	Основные.Вставить("АвтоматическоеСохранениеПользовательскихНастроек", Неопределено);
	
	Возврат Основные;
	
КонецФункции

// Шаблон описания запретов открытия.
// 
// Возвращаемое значение:
//  Структура - Шаблон описания запретов открытия:
// * Использование - Булево - Использовать ли функционал запрета открытия формы
// * КоллекцияЗапретов - Массив из см. ШаблонОписанияЭлементаЗапретаОткрытия - Коллекция настроек запретов
// * РолиПользователейБезОграничений - Неопределено, СписокЗначений из Строка - Роли, которые игнорируют запрет
Функция ШаблонОписанияЗапретовОткрытия() Экспорт
	
	ЗапретыОткрытия = Новый Структура;
	
	ЗапретыОткрытия.Вставить("Использование", Ложь);
	ЗапретыОткрытия.Вставить("КоллекцияЗапретов", Новый Массив);
	ЗапретыОткрытия.Вставить("РолиПользователейБезОграничений", Неопределено);
	
	Возврат ЗапретыОткрытия;
	
КонецФункции

// Шаблон описания элемента запрета открытия.
// 
// Возвращаемое значение:
//  Структура - Шаблон описания элемента запрета открытия:
// * Использование - Булево - Использование элемента запрета
// * ВидСравнения - Неопределено, ВидСравненияКомпоновкиДанных - Вид сравнения с источником значения
// * ЗначениеСравнения - Произвольный, Неопределено - Произвольное значение, которое сравнивают с источником значения
// * ИсточникЗначения - Строка - Имя метаданного (константы или праметра сеанса)
// * ТекстЗапрета - Строка - Текст, который будет выводиться пользователю
Функция ШаблонОписанияЭлементаЗапретаОткрытия() Экспорт
	
	ЭлементЗапрета = Новый Структура;
	ЭлементЗапрета.Вставить("Использование", Ложь);
	ЭлементЗапрета.Вставить("ВидСравнения", Неопределено);
	ЭлементЗапрета.Вставить("ЗначениеСравнения", Неопределено);
	ЭлементЗапрета.Вставить("ИсточникЗначения", "");
	ЭлементЗапрета.Вставить("ТекстЗапрета", "");

	Возврат ЭлементЗапрета;
	
КонецФункции

// Шаблон описания настроек источника.
// 
// Возвращаемое значение:
//  Структура - Шаблон описания настроек источника:
// * Использование - Булево - Использование настроек источника
// * ОсновнаяТаблица - Строка - Одноименное свойство динамического списка
// * ТекстЗапроса - Строка - Одноименное свойство динамического списка
// * НастройкиКомпоновщика - НастройкиКомпоновкиДанных - Одноименное свойство динамического списка
// * АвтоЗаполнениеДоступныхПолей - Булево - Одноименное свойство динамического списка
// * ПолучениеПредставленийДляНевидимыхПолей - Булево - Одноименное свойство динамического списка
Функция ШаблонОписанияНастроекИсточника() Экспорт
	
	Источник = Новый Структура;
	Источник.Вставить("Использование", Ложь);
	Источник.Вставить("ОсновнаяТаблица", "");
	Источник.Вставить("ТекстЗапроса", "");
	Источник.Вставить("НастройкиКомпоновщика", Новый НастройкиКомпоновкиДанных);
	Источник.Вставить("АвтоЗаполнениеДоступныхПолей", Ложь);
	Источник.Вставить("ПолучениеПредставленийДляНевидимыхПолей", Ложь);
	
	Возврат Источник;
		
КонецФункции

// Шаблон настроек истории обновления.
// 
// Возвращаемое значение:
//  Структура - Шаблон настроек истории обновления:
// * Использование - Булево - Использование истории обновления
// * ЧастотаЗаписи - Число - Частота записи накопленной истории в РС
// * ТолькоИзмененные - Булево - Записывать только измененные настройки (иначе будет записываться каждое обновление или скролл)
// * ФиксироватьВсе - Булево - Фиксация всех настроек
// * ФиксироватьГруппировки - Булево - Фиксация настроек, в которых есть группировки
// * ФиксироватьСортировки - Булево - Фиксация настроек, в которых есть сортировки
// * ФиксироватьОтборы - Булево - Фиксация настроек, в которых есть отборы
// * АдресНакопленного - Строка - Служебный параметр, не хранит значение в БД
// * ПоследняяФиксация - Дата - Служебный параметр, не хранит значение в БД
Функция ШаблонНастроекИсторииОбновления() Экспорт
	
	ИсторияОбновления = Новый Структура;
	ИсторияОбновления.Вставить("Использование"    , Ложь);
	ИсторияОбновления.Вставить("ЧастотаЗаписи"    , 0);
	ИсторияОбновления.Вставить("ТолькоИзмененные" , Ложь);
	
	ИсторияОбновления.Вставить("ФиксироватьВсе"   , Ложь);
	ИсторияОбновления.Вставить("ФиксироватьГруппировки", Ложь);
	ИсторияОбновления.Вставить("ФиксироватьСортировки" , Ложь);
	ИсторияОбновления.Вставить("ФиксироватьОтборы", Ложь);
	
	ИсторияОбновления.Вставить("АдресНакопленного", "");
	ИсторияОбновления.Вставить("ПоследняяФиксация", '0001-01-01');
	
	Возврат ИсторияОбновления;
	
КонецФункции

// Шаблон описания накопленной истории обновлений.
// 
// Параметры:
//  ПараметрыИстории - см. ШаблонНастроекИсторииОбновления
// 
// Возвращаемое значение:
//  Структура - Шаблон описания накопленной истории обновлений:
// * КлючСписка - СправочникСсылка.КлючевыеОперации, Неопределено - Ключ списка
// * ПараметрыИстории - см. ШаблонНастроекИсторииОбновления
// * ПрошлыеНастройки - Неопределено, НастройкиКомпоновкиДанных - Прошлые настройки (для сравнения)
// * НакопленныеОбновления - Массив из см. ШаблонОписанияНакопленногоОбновления - Коллекция накопленных обновлений
Функция ШаблонОписанияНакопленнойИсторииОбновлений(ПараметрыИстории) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КлючСписка", Неопределено);
	Результат.Вставить("ПараметрыИстории", ПараметрыИстории);
	Результат.Вставить("ПрошлыеНастройки", Неопределено);
	Результат.Вставить("НакопленныеОбновления", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

// Шаблон описания накопленного обновления.
// 
// Возвращаемое значение:
//  Структура - Шаблон описания накопленного обновления:
// * Дата - Дата -
// * ДатаМиллисекунды - Число -
// * Настройки - НастройкиКомпоновкиДанных, Неопределено -
Функция ШаблонОписанияНакопленногоОбновления() Экспорт
	
	НакопленноеОбновление = Новый Структура;
	
	#Если Клиент Тогда
		НакопленноеОбновление.Вставить("Дата", ОбщегоНазначенияКлиент.ДатаСеанса());
	#Иначе
		НакопленноеОбновление.Вставить("Дата", ТекущаяДатаСеанса());
	#КонецЕсли
	
	НакопленноеОбновление.Вставить("ДатаМиллисекунды", ТекущаяУниверсальнаяДатаВМиллисекундах());
	НакопленноеОбновление.Вставить("Настройки", Неопределено);

	Возврат НакопленноеОбновление;
	
КонецФункции

// Шаблон параметров отладки.
// 
// Возвращаемое значение:
//  Структура - Шаблон параметров отладки:
// * РежимОткрытияНастроек - Булево - Если Истина, то форма будет открываться с переданными настройками и ограничения будут сняты
// * Настройки - НастройкиКомпоновкиДанных - Настройки компоновки для загрузки в форму списка
Функция ШаблонПараметровОтладки() Экспорт
	
	ПараметрыОтладки = Новый Структура;
	ПараметрыОтладки.Вставить("РежимОткрытияНастроек", Ложь);
	ПараметрыОтладки.Вставить("Настройки", Новый НастройкиКомпоновкиДанных());
	
	Возврат ПараметрыОтладки;
	
КонецФункции

#КонецОбласти

#Область СтроковыеШаблоны
	
// Функция возвращает разделитель формы и элемента
// 
// Возвращаемое значение:
//  Строка
//
Функция РазделительФормыИЭлемента() Экспорт
	
	Возврат ":ДинамическийСписок.";
	
КонецФункции

// Возвращает Наименование ключевой операции по ключу
//
// Параметры:
//  ПолноеИмяКлюча	 - Строка - Полное имя ключа
// 
// Возвращаемое значение:
//  Строка
//
Функция НаименованиеКлючевойОперации(ПолноеИмяКлюча) Экспорт
	
	Возврат СтрШаблон("АДС: %1", ПолноеИмяКлюча);
	
КонецФункции

// Функция возвращает имя ключа динамического списка
//
// Параметры:
//  ПолноеИмяФормы	 - Строка - Полное имя формы с ДС
//  ИмяЭлемента		 - Строка - Имя элемента ДС
// 
// Возвращаемое значение:
//  Строка
//
Функция ИмяКлючаДинамическогоСписка(ПолноеИмяФормы, ИмяЭлемента) Экспорт
	
	Разделитель = РазделительФормыИЭлемента();
	Возврат СтрШаблон("%1%2%3", ПолноеИмяФормы, Разделитель, ИмяЭлемента);
	
КонецФункции

// Функция возвращает имя реквизита формы настроек
// 
// Возвращаемое значение:
//  Строка
//
Функция ИмяРеквизитаФормыНастроек() Экспорт
	
	Возврат "НастройкиДинамическихСписков";
	
КонецФункции

// Функция - Имя ключа динамического списка формы
//
// Параметры:
//  ФормаИлиНастройки	 - ФормаКлиентскогоПриложения, Структура  - Форма или настройки из формы
//  ИмяЭлемента			 - Строка - Имя элемента ДС
// 
// Возвращаемое значение:
//  Строка
//
Функция ИмяКлючаДинамическогоСпискаФормы(ФормаИлиНастройки, ИмяЭлемента) Экспорт
	
	КлючФормы = КлючФормыИзПараметров(ФормаИлиНастройки);
	
	Возврат ИмяКлючаДинамическогоСписка(КлючФормы, ИмяЭлемента);
	
КонецФункции

// Функция возвращает имя свойства конекста событий обновления списка
// 
// Возвращаемое значение:
//  Строка - Имя свойства
//
Функция ИмяСвойстваКонтекстаСобытийОбновленияСписка() Экспорт
	
	Возврат "КонтекстДанныхДинамическогоСписка";
	
КонецФункции

// Имя параметра открытия формы с настройками.
// 
// Возвращаемое значение:
//  Строка
Функция ИмяПараметровОтладкиНаФорме() Экспорт
	
	Возврат "АДС_ПараметрыОтладки";
	
КонецФункции

#КонецОбласти

#Область Настройки
	
// Функция возвращает настройки из формы с ДС
//
// Параметры:
//  ФормаИлиНастройки	 - ФормаКлиентскогоПриложения
//  					 - см. ШаблонПараметровНаФорме
// 
// Возвращаемое значение:
//  см. ШаблонПараметровНаФорме
//
Функция НастройкиНаФорме(ФормаИлиНастройки) Экспорт
	
	Если ТипЗнч(ФормаИлиНастройки) = Тип("Структура") Тогда
		Возврат ФормаИлиНастройки;
	Иначе
		Возврат ФормаИлиНастройки[ИмяРеквизитаФормыНастроек()];
	КонецЕсли;
		
КонецФункции

// Возвращает реквизит динамический список по его настройкам
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения - Форма с ДС
//  НастройкиСписка	 - см. ШаблонПараметровДинамическогоСписка
// 
// Возвращаемое значение:
//  ДинамическийСписок - Реквизит ДС
//
Функция РеквизитСписокПоНастройкам(Форма, НастройкиСписка) Экспорт
	
	Возврат Форма[НастройкиСписка.ИмяРеквизита];
	
КонецФункции

// Возвращает ключ формы из параметров
//
// Параметры:
//  ФормаИлиНастройки	 - ФормаКлиентскогоПриложения, Структура  - Форма или настройки из формы
// 
// Возвращаемое значение:
//  Строка - ключ формы
//
Функция КлючФормыИзПараметров(ФормаИлиНастройки) Экспорт
	
	Возврат НастройкиНаФорме(ФормаИлиНастройки).КлючФормы;
	
КонецФункции

// Возвращает элемент список по настройкам
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения - Форма с ДС
//  НастройкиСписка	 - см. ШаблонПараметровДинамическогоСписка
// 
// Возвращаемое значение:
//  ТаблицаФормы - Элемент ДС
//
Функция ЭлементСписокПоНастройкам(Форма, НастройкиСписка) Экспорт
	
	Возврат Форма.Элементы[НастройкиСписка.ИмяЭлемента];
	
КонецФункции

#КонецОбласти

#Область Вспомогательные

// Возвращает значение свойства объекта.
//
// Параметры:
//   Объект   - Произвольный - Объект, из которого необходимо прочитать значение свойства.
//   Свойство - Строка - Имя свойства объекта, для которого необходимо прочитать значение.
//   ЗначениеПоУмолчанию - Произвольный - Необязательный. Возвращается когда в объекте нет значения по указанному
//                                        ключу.
//       Для скорости рекомендуется передавать только быстро вычисляемые значения (например примитивные типы),
//       а инициализацию более тяжелых значений выполнять после проверки полученного значения (только если это
//       требуется).
//
// Возвращаемое значение:
//   Произвольный - Значение свойства объекта. ЗначениеПоУмолчанию если в объекте нет указанного свойства.
//
Функция СвойствоОбъекта(Объект, Свойство, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Если Объект = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	СтруктураРеквизита = Новый Структура(Свойство, ЗначениеПоУмолчанию);
	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[Свойство];
	
КонецФункции

// Рекурсивно дополняет структуру значениями из другой структуры.
//
// Параметры:
//   Приемник       - Структура - коллекция, в которую будут добавляться новые значения.
//   Источник       - Структура - коллекция, из которой будут считываться пары Ключ и Значение для заполнения.
//   ДобавлятьНовые - Булево    - Нужно ли добавлять новые ключи в приемник или только заполнять существующие.
//
Процедура ДополнитьСтруктуруРекурсивно(Приемник, Источник, ДобавлятьНовые = Ложь) Экспорт

	ТипСтруктура = Тип("Структура");
	
	Если ТипЗнч(Приемник) <> ТипСтруктура
		ИЛИ ТипЗнч(Источник) <> ТипСтруктура Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из Источник Цикл
		
		ТекущийКлюч       = КлючИЗначение.Ключ; //Строка
		ЗначениеИсточника = КлючИЗначение.Значение;
		ЗначениеПриемника = Неопределено;
		
		Если Приемник.Свойство(ТекущийКлюч, ЗначениеПриемника) Тогда
			
			Если ТипЗнч(ЗначениеПриемника) = Тип("Структура") 
				И ТипЗнч(ЗначениеИсточника) = Тип("Структура") Тогда
				ДополнитьСтруктуруРекурсивно(ЗначениеПриемника, ЗначениеИсточника, ДобавлятьНовые);
			Иначе
				Приемник[ТекущийКлюч] = ЗначениеИсточника;
			КонецЕсли;
			
		ИначеЕсли ДобавлятьНовые Тогда
			
			Приемник.Вставить(ТекущийКлюч, ЗначениеИсточника);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
	
// Устанавливает значение свойства объекта, если оно есть
//
// Параметры:
//  Объект		 - Произвольный - объект, значение свойства которого необходимо установить
//  ИмяСвойства	 - Строка - Имя свойства, значение которого необходимо установить
//  Значение	 - Произвольный	 - Значение, которое необходимо установить
//
Процедура УстановитьСвойство(Объект, ИмяСвойства, Значение) Экспорт
	
	ЗаполнитьЗначенияСвойств(Объект, Новый Структура(ИмяСвойства, Значение));
	
КонецПроцедуры

// Удаляет все вхождения значений из массива 
//
// Параметры:
//  Массив				 - Массив из Произвольный - Массив, из которого нужно удалять значения
//  УдаляемыеЗначения	 - Массив из Произвольный - Массив, значения которого нужно удалить
//
Процедура УдалитьВсеВхожденияЗначенийИзМассива(Массив, УдаляемыеЗначения) Экспорт
	
	Для Каждого УдаляемоеЗначение Из УдаляемыеЗначения Цикл
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(Массив, УдаляемоеЗначение);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает все элементы с типом ТаблицаФормы
//
// Параметры:
//  ЭлементыФормы	 - ВсеЭлементыФормы - Коллекция с элементами формы
// 
// Возвращаемое значение:
//  Массив из ТаблицаФормы - найденные элементы 
//
Функция ЭлементыТаблицыНаФорме(ЭлементыФормы) Экспорт
	
	ЭлементыТаблицы  = Новый Массив; //Массив из ТаблицаФормы
	
	ТипТаблицаФормы = Тип("ТаблицаФормы");
	Для Каждого ЭлементФормы Из ЭлементыФормы Цикл
		Если ТипЗнч(ЭлементФормы) = ТипТаблицаФормы Тогда
			ЭлементыТаблицы.Добавить(ЭлементФормы);
		КонецЕсли;
	КонецЦикла;

	Возврат ЭлементыТаблицы;
	
КонецФункции

// Добавляет в массив элемент с проверкой уникальности
//
// Параметры:
//  Массив	 - Массив из Неопределено - Массив, который необходимо дополнить
//  Элемент	 - Произвольный - Элемент, который необходимо добавить
//
Процедура ДобавитьВМассивСПроверкой(Массив, Элемент) Экспорт
	
	Если Массив.Найти(Элемент) = Неопределено Тогда
		Массив.Добавить(Элемент);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
	