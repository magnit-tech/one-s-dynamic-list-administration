// @strict-types

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьВспомогательныеЗначения();
	
	ЗаполнитьДеревоДоступныхФорм();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДоступныеФормы

// Доступные формы выбор.
// 
// Параметры:
//  Элемент - ТаблицаФормы - Элемент
//  ВыбраннаяСтрока - Число - Выбранная строка
//  Поле - ПолеФормы - Поле
//  СтандартнаяОбработка - Булево - Стандартная обработка
&НаКлиенте
Процедура ДоступныеФормыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбратьФорму();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВыбратьФорму(Команда)
	
	ВыбратьФорму();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыбратьФорму()
	
	ТекущиеДанные = Элементы.ДоступныеФормы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПолноеИмя = "";
	Иначе
		ПолноеИмя = ТекущиеДанные.ПолноеИмя;
	КонецЕсли;
	
	ОповеститьОВыборе(ПолноеИмя);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВспомогательныеЗначения()
	
	ВспомогательныеЗначения	 = ШаблонВспомогательныхЗначений();
	 	
КонецПроцедуры

// Шаблон вспомогательных данных.
// 
// Возвращаемое значение:
//  Структура - Шаблон вспомогательных данных:
// * ИндексыКартинкиСтрокФорм - Структура -
&НаСервереБезКонтекста
Функция ШаблонВспомогательныхЗначений()
	
	ИндексыКартинкиСтрокФорм = Новый Структура;
	
	ИменаОбъектов = "Константа,Справочник,Документ,ПланВидовХарактеристик,ПланСчетов,
	|ПланВидовРасчета,РегистрСведений,РегистрНакопления,РегистрБухгалтерии,РегистрРасчета,
	|БизнесПроцесс,Задача,Отчет,Обработка,ВнешнийИсточникДанных,ЖурналДокументов,ПланОбмена";
	
	КоллекцияИмен = СтрРазделить(ИменаОбъектов, "," + Символы.ПС, Ложь);
	
	Для ИндексКартинки = 1 По КоллекцияИмен.Количество() Цикл
		ИндексыКартинкиСтрокФорм.Вставить(КоллекцияИмен[ИндексКартинки-1], ИндексКартинки);
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ИндексыКартинкиСтрокФорм", ИндексыКартинкиСтрокФорм);
	
	Возврат Результат;
	
КонецФункции

// Вспомогательные значения.
// 
// Возвращаемое значение:
//  см. ШаблонВспомогательныхЗначений
&НаСервере
Функция ВспомогательныеЗначения()
	
	Возврат ВспомогательныеЗначения;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоДоступныхФорм()
	
	КорневыеСтроки	= ДоступныеФормы.ПолучитьЭлементы();
	КорневыеСтроки.Очистить();
	
	Для Каждого КлючИЗначение Из МетаданныеЕдинственногоИМножественного() Цикл
		
		КлючМетаданных  = КлючИЗначение.Ключ; //Строка
		ИмяМетаданных	= КлючИЗначение.Значение;
		
		СтрокаТипаОбъектов	= ДобавитьОписаниеДоступнойФормы(КорневыеСтроки, ИмяМетаданных);
		ВспомогательныеЗначения().ИндексыКартинкиСтрокФорм.Свойство(КлючМетаданных, СтрокаТипаОбъектов.Картинка);
		
		КоллекцияСтрокОбъектов	= СтрокаТипаОбъектов.ПолучитьЭлементы();
		
		Для Каждого ТекущиеМетаданные Из Метаданные[ИмяМетаданных] Цикл //ОбъектМетаданных
			
			КоллекцияМетаданныхФорм	= Новый Массив;
			СтрокаТекущегоОбъекта   = Неопределено; //ДанныеФормыЭлементДерева
			
			ЗаполнитьДеревоДоступныхФорм_ОбработатьМетаданные(
				ТекущиеМетаданные, КоллекцияСтрокОбъектов, СтрокаТипаОбъектов, 
				КоллекцияМетаданныхФорм, СтрокаТекущегоОбъекта);
			
			КоллекцияСтрокФорм	= СтрокаТекущегоОбъекта.ПолучитьЭлементы();
						
			ЗаполнитьДеревоДоступныхФорм_ОбработатьФормы(КоллекцияМетаданныхФорм, КоллекцияСтрокФорм);
			
			Если НЕ ЗначениеЗаполнено(КоллекцияСтрокФорм) Тогда
				КоллекцияСтрокОбъектов.Удалить(СтрокаТекущегоОбъекта);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнить дерево доступных форм обработать метаданные.
// 
// Параметры:
//  ТекущиеМетаданные - ОбъектМетаданных - Текущие метаданные
//  КоллекцияСтрокОбъектов - ДанныеФормыКоллекцияЭлементовДерева - Коллекция строк объектов
//  СтрокаТипаОбъектов - ДанныеФормыЭлементДерева - Строка типа объектов
//  КоллекцияМетаданныхФорм - Массив из ОбъектМетаданных - Коллекция метаданных форм
//  СтрокаТекущегоОбъекта - ДанныеФормыЭлементДерева, Неопределено - Строка текущего объекта
&НаСервереБезКонтекста
Процедура ЗаполнитьДеревоДоступныхФорм_ОбработатьМетаданные(
	ТекущиеМетаданные, КоллекцияСтрокОбъектов, СтрокаТипаОбъектов, 
	КоллекцияМетаданныхФорм, СтрокаТекущегоОбъекта)
	
	Если Метаданные.ОбщиеФормы.Содержит(ТекущиеМетаданные) Тогда
		КоллекцияМетаданныхФорм.Добавить(ТекущиеМетаданные);
		СтрокаТекущегоОбъекта	= СтрокаТипаОбъектов;
	Иначе
		КоллекцияМетаданныхФорм = ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.СвойствоОбъекта(
			ТекущиеМетаданные, "Формы"); //Массив из ОбъектМетаданных 
		Если КоллекцияМетаданныхФорм <> Неопределено Тогда
			СтрокаТекущегоОбъекта	= ДобавитьОписаниеДоступнойФормы(КоллекцияСтрокОбъектов, 
			ТекущиеМетаданные.Имя, ТекущиеМетаданные.Синоним, СтрокаТипаОбъектов.Картинка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполнить дерево доступных форм обработать формы.
// 
// Параметры:
//  КоллекцияМетаданныхФорм - Массив из ОбъектМетаданных - Коллекция метаданных форм
//  КоллекцияСтрокФорм - ДанныеФормыКоллекцияЭлементовДерева - Коллекция строк форм
&НаСервере
Процедура ЗаполнитьДеревоДоступныхФорм_ОбработатьФормы(КоллекцияМетаданныхФорм, КоллекцияСтрокФорм)
	
	Для Каждого МетаданныеФормы Из КоллекцияМетаданныхФорм Цикл //ОбъектМетаданныхФорма
		
		Если НЕ МетаданныеФормы.ТипФормы = Метаданные.СвойстваОбъектов.ТипФормы.Управляемая Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеФормы	= ДобавитьОписаниеДоступнойФормы(КоллекцияСтрокФорм);
		ЗаполнитьЗначенияСвойств(ОписаниеФормы, МетаданныеФормы);
		ОписаниеФормы.ПолноеИмя	= МетаданныеФормы.ПолноеИмя();
		ОписаниеФормы.ЭтоФорма	= Истина;
		
		Если ОписаниеФормы.ПолноеИмя = Параметры.ПолноеИмяФормы Тогда
			Элементы.ДоступныеФормы.ТекущаяСтрока = ОписаниеФормы.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Добавить описание доступной формы.
// 
// Параметры:
//  КоллекцияСтрок - ДанныеФормыКоллекцияЭлементовДерева - Коллекция строк
//  Имя - Произвольный, Строка - Имя
//  Синоним - Строка - Синоним
//  Картинка - Число - Картинка
// 
// Возвращаемое значение:
//  ДанныеФормыЭлементДерева - Добавить описание доступной формы
&НаСервереБезКонтекста
Функция ДобавитьОписаниеДоступнойФормы(КоллекцияСтрок,	Имя = "", Синоним = "", Картинка = 0) 
	
	ПолноеИмяФормы = "";
	НавигационнаяСсылка = "";
	
	НоваяСтрока           = КоллекцияСтрок.Добавить();
	НоваяСтрока.Имя       = Имя;
	НоваяСтрока.Синоним   = ?(ПустаяСтрока(Синоним), Имя, Синоним);
	НоваяСтрока.Картинка  = Картинка;
	НоваяСтрока.ПолноеИмя = ПолноеИмяФормы;
	
	НоваяСтрока.НавигационнаяСсылка = НавигационнаяСсылка;
	
	НоваяСтрока.ЭтоФорма  = НЕ ПустаяСтрока(НоваяСтрока.ПолноеИмя) 
	И НЕ ПустаяСтрока(НоваяСтрока.НавигационнаяСсылка);
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МетаданныеЕдинственногоИМножественного()
	
	Результат	= Новый Структура;
	Результат.Вставить("ОбщаяФорма"				, "ОбщиеФормы");
	Результат.Вставить("ПланОбмена"				, "ПланыОбмена");
	Результат.Вставить("Справочник"				, "Справочники");
	Результат.Вставить("Документ"				, "Документы");
	Результат.Вставить("ЖурналДокументов"		, "ЖурналыДокументов");
	Результат.Вставить("Перечисление"			, "Перечисления");
	Результат.Вставить("Отчет"					, "Отчеты");
	Результат.Вставить("Обработка"				, "Обработки");
	Результат.Вставить("ПланВидовХарактеристик"	, "ПланыВидовХарактеристик");
	Результат.Вставить("ПланСчетов"				, "ПланыСчетов");
	Результат.Вставить("ПланВидовРасчета"		, "ПланыВидовРасчета");
	Результат.Вставить("РегистрСведений"		, "РегистрыСведений");
	Результат.Вставить("РегистрНакопления"		, "РегистрыНакопления");
	Результат.Вставить("РегистрБухгалтерии"		, "РегистрыБухгалтерии");
	Результат.Вставить("РегистрРасчета"			, "РегистрыРасчета");
	Результат.Вставить("БизнесПроцесс"			, "БизнесПроцессы");
	Результат.Вставить("Задача"					, "Задачи");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
