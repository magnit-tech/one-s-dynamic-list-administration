// @strict-types

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ИнициализироватьФорму(ТекущийОбъект.КлючСписка);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Запись.ИсходныйКлючЗаписи.Пустой() Тогда
		ИнициализироватьФорму();
		ОбновитьЭлементыФормы(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Настройки = Неопределено;
	
	СинхронизироватьНастройкиИРеквизитыФормы(Ложь, Настройки);
	
	ТекущийОбъект.Настройки = Новый ХранилищеЗначения(Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КлючСпискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = ИТМ_АдминистрированиеДинамическихСписковКлиент.ПараметрыОткрытияФормыВыбораКлючаСписка();
	ПараметрыОткрытия.Владелец = Элемент;
	
	ИТМ_АдминистрированиеДинамическихСписковКлиент.ОткрытьФормуВыбораКлючаСписка(ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеПриИзменении(Элемент)
	
	ОбновитьЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапретитьОтборыПоВсемПолямПриИзменении(Элемент)
	
	ОбновитьЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОграниченияОтборовПриИзменении(Элемент)
	
	ОбновитьЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СвойствоОсновнаяТаблицаПриИзменении(Элемент)
	
	ОбновитьКомпоновщикДанныхИсточника();
	
КонецПроцедуры

&НаКлиенте
Процедура СвойствоТекстЗапросаПриИзменении(Элемент)
	
	ОбновитьКомпоновщикДанныхИсточника();
	
КонецПроцедуры

&НаКлиенте
Процедура Группировка_ИспользованиеПриИзменении(Элемент)
	
	ОбновитьЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Группировка_ЗапрещатьПоВсемПолямПриИзменении(Элемент)
	
	ОбновитьЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Сортировка_ИспользованиеПриИзменении(Элемент)
	
	ОбновитьЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Сортировка_ЗапрещатьПоВсемПолямПриИзменении(Элемент)
	
	ОбновитьЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНастройкиСвойствПриИзменении(Элемент)
	
	ОбновитьЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияОбновления_ФиксироватьВсеПриИзменении(Элемент)
	
	ОбновитьФиксируемыеСобытияИсторииОбновления(Элемент);

КонецПроцедуры
 
&НаКлиенте
Процедура ИсторияОбновления_ИспользованиеПриИзменении(Элемент)

	ОбновитьФиксируемыеСобытияИсторииОбновления(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияОбновления_ФиксироватьГруппировкиПриИзменении(Элемент)
	
	ОбновитьФиксируемыеСобытияИсторииОбновления(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ИсторияОбновления_ФиксироватьСортировкиПриИзменении(Элемент)
	
	ОбновитьФиксируемыеСобытияИсторииОбновления(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ИсторияОбновления_ФиксироватьОтборыПриИзменении(Элемент)
	
	ОбновитьФиксируемыеСобытияИсторииОбновления(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура УсловноеОформление_ИспользованиеПриИзменении(Элемент)
	
    ОбновитьЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключатьПользовательскиеНастройкиПриОткрытииПриИзменении(Элемент)

	ОбновитьЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Отбор_ОтключатьПользовательскиеНастройкиПриОткрытииПриИзменении(Элемент)
	
	ОбновитьЭлементыФормы(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура Группировка_ОтключатьПользовательскиеНастройкиПриОткрытииПриИзменении(Элемент)
	
	ОбновитьЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Сортировка_ОтключатьПользовательскиеНастройкиПриОткрытииПриИзменении(Элемент)
	
	ОбновитьЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УсловноеОформление_ОтключатьПользовательскиеНастройкиПриОткрытииПриИзменении(Элемент)
	
	ОбновитьЭлементыФормы(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура Отбор_РолиПользователейБезОграниченийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РолиПользователейБезОграниченийНачалоВыбора("Отбор");
	
КонецПроцедуры

&НаКлиенте
Процедура Группировка_РолиПользователейБезОграниченийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	РолиПользователейБезОграниченийНачалоВыбора("Группировка");
	
КонецПроцедуры

&НаКлиенте
Процедура Сортировка_РолиПользователейБезОграниченийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	РолиПользователейБезОграниченийНачалоВыбора("Сортировка");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапретыОткрытия_РолиПользователейБезОграниченийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РолиПользователейБезОграниченийНачалоВыбора("ЗапретыОткрытия");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтбор_ДополнительноРазрешенные

&НаКлиенте
Процедура ДополнительноРазрешенныеПоляОтбораПриИзменении(Элемент)
	
	ОбновитьКоличествоДополнительныхПолей(ЭтотОбъект, "Отбор");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтбор_ДополнительноЗапрещенные

&НаКлиенте
Процедура ДополнительноЗапрещенныеПоляОтбораПриИзменении(Элемент)
	
	ОбновитьКоличествоДополнительныхПолей(ЭтотОбъект, "Отбор");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыГруппировка_ДополнительноЗапрещенные

&НаКлиенте
Процедура Группировка_ДополнительноЗапрещенныеПриИзменении(Элемент)
	
	ОбновитьКоличествоДополнительныхПолей(ЭтотОбъект, "Группировка");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыГруппировка_ДополнительноРазрешенные

&НаКлиенте
Процедура Группировка_ДополнительноРазрешенныеПриИзменении(Элемент)
	
	ОбновитьКоличествоДополнительныхПолей(ЭтотОбъект, "Группировка");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Команда_КонструкторЗапросаИсточника(Команда)
	
	ОткрытьКонструкторЗапросаИсточника();
	
КонецПроцедуры

&НаКлиенте
Процедура Команда_ЗаполнитьИзДругойНастройки(Команда)

	ВыбратьНастройкуДляЗаполнения();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСписка(Команда)
	
	ДанныеКлючаСписка = ИТМ_АдминистрированиеДинамическихСписковВызовСервера.ДанныеИзКлючаСписка(Запись.КлючСписка);
	ОткрытьФорму(ДанныеКлючаСписка.ПолноеИмяФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИсториюОбновления(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ОтборКлючСписка", Запись.КлючСписка);
	
	ОткрытьФорму("РегистрСведений.ИТМ_ИсторияОбновленияДинамическихСписков.Форма.ФормаСписка", ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияФормы
	
// Инициализировать форму.
// 
// Параметры:
//  КлючСписка - Неопределено, СправочникСсылка.КлючевыеОперации - Ключ списка
&НаСервере
Процедура ИнициализироватьФорму(КлючСписка = Неопределено)
	
	Если ТипЗнч(КлючСписка) = Тип("СправочникСсылка.КлючевыеОперации") Тогда
		Настройки = РегистрыСведений.ИТМ_НастройкиДинамическихСписков.НастройкиСписка(КлючСписка);
	Иначе
		Настройки = Неопределено;
	КонецЕсли;
	
	СинхронизироватьНастройкиИРеквизитыФормы(Истина, Настройки);
	
	ОбновитьКомпоновщикДанныхИсточника();
	
	ЗаполнитьСпискиРолей();
	
	ЗаполнитьДоступныеВидыСравненияДляЗапретаОткрытия();
	
	ЗаполнитьДоступныеИсточникиДляЗапретаОткрытия();
	
	ЗаполнитьПоляБулевоСоЗначениемАвто();
	
КонецПроцедуры

// Синхронизировать настройки и реквизиты формы.
// 
// Параметры:
//  ИзНастроекВФорму - Булево - Из настроек в форму
//  Настройки  - Неопределено
//             - см. ИТМ_АдминистрированиеДинамическихСписковКлиентСервер.ШаблонПараметровДинамическогоСписка 
//  ПолныйПуть - Строка, Произвольный - Полный путь
//  ЗначенияРеквизитовФормы - Структура, Неопределено - Значения реквизитов формы
&НаСервере
Процедура СинхронизироватьНастройкиИРеквизитыФормы(ИзНастроекВФорму, 
	Настройки = Неопределено, ПолныйПуть = "", ЗначенияРеквизитовФормы = Неопределено)
	
	ЭтоКореньНастроек = ПустаяСтрока(ПолныйПуть);
	
	Если ЭтоКореньНастроек Тогда
		ЗначенияРеквизитовФормы = ЗначенияРеквизитовФормы();
		Если Настройки = Неопределено Тогда
			Настройки = РегистрыСведений.ИТМ_НастройкиДинамическихСписков.НастройкиСписка(Запись.КлючСписка);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из Настройки Цикл
		
		СинхронизироватьНастройкиИРеквизитыФормы_ОбработатьКлючИЗначение(
			Настройки, ЗначенияРеквизитовФормы, ИзНастроекВФорму, КлючИЗначение, ПолныйПуть);
		
	КонецЦикла;
	
	Если НЕ ЭтоКореньНастроек И СтрНайти(ПолныйПуть, ".") = 0 Тогда
		ОбновитьКоличествоДополнительныхПолей(ЭтотОбъект, ПолныйПуть);
	КонецЕсли;
	
КонецПроцедуры

// Синхронизировать настройки и реквизиты формы обработать ключ и значение.
// 
// Параметры:
//  Настройки - см. СинхронизироватьНастройкиИРеквизитыФормы.Настройки
//  ЗначенияРеквизитовФормы - см. СинхронизироватьНастройкиИРеквизитыФормы.ЗначенияРеквизитовФормы
//  ИзНастроекВФорму - см. СинхронизироватьНастройкиИРеквизитыФормы.ИзНастроекВФорму
//  КлючИЗначение - КлючИЗначение, Произвольный - Ключ и значение
//  ПолныйПуть - см. СинхронизироватьНастройкиИРеквизитыФормы.ПолныйПуть
&НаСервере
Процедура СинхронизироватьНастройкиИРеквизитыФормы_ОбработатьКлючИЗначение(
	Настройки, ЗначенияРеквизитовФормы, ИзНастроекВФорму, КлючИЗначение, ПолныйПуть)
	
	ЭтоКореньНастроек = ПустаяСтрока(ПолныйПуть);
	КлючНастройки     = КлючИЗначение.Ключ;
	ЗначениеНастройки = КлючИЗначение.Значение; //Произвольный
	ЗначениеРеквизита = Неопределено;
	Если ЭтоКореньНастроек Тогда
		ИмяРеквизитаФормы = КлючНастройки;
	Иначе
		ИмяРеквизитаФормы = СтрШаблон("%1_%2", ПолныйПуть, КлючНастройки);
	КонецЕсли;

	Если ТипЗнч(ЗначениеНастройки) = Тип("Структура") Тогда

		СинхронизироватьНастройкиИРеквизитыФормы(ИзНастроекВФорму, ЗначениеНастройки, ИмяРеквизитаФормы,
			ЗначенияРеквизитовФормы);

	ИначеЕсли ЗначенияРеквизитовФормы.Свойство(ИмяРеквизитаФормы, ЗначениеРеквизита) Тогда

		Если ИзНастроекВФорму Тогда
			ЗаполнитьЗначениеРеквизитаИзЗначенияНастройки(
				ЗначениеНастройки, ЭтотОбъект[ИмяРеквизитаФормы]);
		Иначе
			ЗаполнитьЗначениеНастройкиИзЗначенияРеквизита(
				Настройки[КлючНастройки], ЗначениеРеквизита);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Заполнить значение настройки из значения реквизита.
// 
// Параметры:
//  ЗначениеНастройки - Произвольный - Значение настройки
//  ЗначениеРеквизита - Произвольный - Значение реквизита
&НаСервере
Процедура ЗаполнитьЗначениеНастройкиИзЗначенияРеквизита(ЗначениеНастройки, ЗначениеРеквизита)
	
	ТипЗначенияНастройки = ТипЗнч(ЗначениеНастройки);
	ТипЗначенияРеквизита = ТипЗнч(ЗначениеРеквизита);
	
	Если ТипЗначенияРеквизита = Тип("ДанныеФормыКоллекция") Тогда
		
		// сонар:EmptyBlock
		Если ТипЗначенияНастройки = Тип("Соответствие") Тогда
			
			ЗначениеНастройкиСоответствием = ЗначениеНастройки; //Соответствие
			ЗначениеРеквизитаСоответствием = ЗначениеРеквизита; //Соответствие
			
			ЗначениеНастройкиСоответствием.Очистить();
			Для Каждого СрокаРеквизита Из ЗначениеРеквизитаСоответствием Цикл
				ЗначениеНастройкиСоответствием.Вставить(СрокаРеквизита.Ключ, СрокаРеквизита.Значение);
			КонецЦикла;
		
		ИначеЕсли ТипЗначенияНастройки = Тип("Массив") Тогда
			
			ТаблицаРеквизита  = ЗначениеРеквизита; //ДанныеФормыКоллекция
			ЗначениеНастройки = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаРеквизита.Выгрузить());
			
		КонецЕсли;
		
	ИначеЕсли ТипЗначенияНастройки = Тип("НастройкиКомпоновкиДанных") Тогда
		
		Если ТипЗначенияРеквизита = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
			КомпоновщикНастроек = ЗначениеРеквизита; //КомпоновщикНастроекКомпоновкиДанных
			ЗначениеНастройки = КомпоновщикНастроек.Настройки; //НастройкиКомпоновкиДанных
		КонецЕсли;
		
	Иначе
		
		ЗначениеНастройки = ЗначениеРеквизита;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполнить значение реквизита из значения настройки.
// 
// Параметры:
//  ЗначениеНастройки - Произвольный - Значение настройки
//  ЗначениеРеквизита - Произвольный - Значение реквизита
&НаСервере
Процедура ЗаполнитьЗначениеРеквизитаИзЗначенияНастройки(ЗначениеНастройки, ЗначениеРеквизита)
	
	Если ТипЗнч(ЗначениеРеквизита) = Тип("ДанныеФормыКоллекция") Тогда
		
		ЗначениеРеквизита.Очистить();
		Если ТипЗнч(ЗначениеНастройки) = Тип("Соответствие")
		    ИЛИ ТипЗнч(ЗначениеНастройки) = Тип("Массив") Тогда
			
			Для Каждого ЗначениеЭлементаНастройки Из ЗначениеНастройки Цикл
				ЗаполнитьЗначенияСвойств(ЗначениеРеквизита.Добавить(), ЗначениеЭлементаНастройки);
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		
		Если ТипЗнч(ЗначениеНастройки) = Тип("НастройкиКомпоновкиДанных") Тогда
			ЗначениеРеквизита.ЗагрузитьНастройки(ЗначениеНастройки);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("СписокЗначений") Тогда
		
		Если ТипЗнч(ЗначениеНастройки) = Тип("СписокЗначений") Тогда
			ЗначениеРеквизита = ЗначениеНастройки;
			ЗначениеРеквизита.ТипЗначения = Новый ОписаниеТипов("Строка");
		КонецЕсли;
		
	Иначе
		ЗначениеРеквизита = ЗначениеНастройки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомпоновщикДанныхИсточника(ЭтоИнициализация = Ложь)
	
	ТекстЗапроса    = ТекстЗапросаИсточника(ЭтотОбъект);
	
	СхемаКомпоновки = НовыйСКД();
	ДобавитьНаборДанныхЗапрос(СхемаКомпоновки, "ОсновнойНабор", ТекстЗапроса);
	
	Источник_АдресСхемыКомпоновки = ПоместитьВоВременноеХранилище(СхемаКомпоновки, УникальныйИдентификатор);
	
	Если ЭтоИнициализация Тогда
		НастройкиКомпоновки = СхемаКомпоновки.НастройкиПоУмолчанию;
	Иначе
		НастройкиКомпоновки = Источник_НастройкиКомпоновщика.Настройки;
	КонецЕсли;
	
	Источник_НастройкиКомпоновщика = НовыйКомпоновщикНастроек(Источник_АдресСхемыКомпоновки, НастройкиКомпоновки);
	
	ОбновитьЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеВидыСравненияДляЗапретаОткрытия()

	СписокВыбора = Элементы.ЗапретыОткрытия_КоллекцияЗапретовВидСравнения.СписокВыбора; //СписокЗначений из ВидСравненияКомпоновкиДанных
	СписокВыбора.Очистить();
	ДоступныеВидыСравнения = ИТМ_АдминистрированиеДинамическихСписков.ДоступныеВидыСравненияДляЗапретаОткрытия();
	Для Каждого Элемент Из ДоступныеВидыСравнения Цикл
		СписокВыбора.Добавить(Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеИсточникиДляЗапретаОткрытия()
	
	СписокВыбора = Элементы.ЗапретыОткрытия_КоллекцияЗапретовИсточникЗначения.СписокВыбора; //СписокЗначений из Строка
	СписокВыбора.Очистить();
	
	ПеребираемыеКоллекции = Новый Массив(2);
	ПеребираемыеКоллекции[0] = "Константы";
	ПеребираемыеКоллекции[1] = "ПараметрыСеанса";
	
	Для Каждого ИмяКоллекции Из ПеребираемыеКоллекции Цикл

		Для Каждого ОбъектМетаданных Из Метаданные[ИмяКоллекции] Цикл //ОбъектМетаданных

			СписокВыбора.Добавить(ОбъектМетаданных.ПолноеИмя());
			
		КонецЦикла;	
			
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоляБулевоСоЗначениемАвто()
	
	НеобходимыеЭлементы = Новый Массив; //Массив из ПолеФормы
	НеобходимыеЭлементы.Добавить(Элементы.ДинамическоеСчитываниеДанных);
	НеобходимыеЭлементы.Добавить(Элементы.АвтоматическоеСохранениеПользовательскихНастроек);
	НеобходимыеЭлементы.Добавить(Элементы.Отбор_ОтключатьПользовательскиеНастройкиПриОткрытии);
	НеобходимыеЭлементы.Добавить(Элементы.Сортировка_ОтключатьПользовательскиеНастройкиПриОткрытии);
	НеобходимыеЭлементы.Добавить(Элементы.Группировка_ОтключатьПользовательскиеНастройкиПриОткрытии);
	НеобходимыеЭлементы.Добавить(Элементы.УсловноеОформление_ОтключатьПользовательскиеНастройкиПриОткрытии);
	
	Для Каждого Элемент Из НеобходимыеЭлементы Цикл
		
		//@skip-check property-return-type - баг ЕДТ
		СписокВыбора = Элемент.СписокВыбора; //СписокЗначений из Неопределено
		СписокВыбора.Очистить();
		СписокВыбора.Добавить(Неопределено, "Авто");
		СписокВыбора.Добавить(Истина      , "Да");
		СписокВыбора.Добавить(Ложь        , "Нет");
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Заполнение

&НаКлиенте
Процедура ВыбратьНастройкуДляЗаполнения()
	
	ПараметрыОткрытия  = ИТМ_АдминистрированиеДинамическихСписковКлиент.ПараметрыОткрытияФормыВыбораКлючаСписка();
	ПараметрыОткрытия.Владелец            = ЭтотОбъект;
	ПараметрыОткрытия.ТолькоПросмотр      = Истина;
	ПараметрыОткрытия.ОписаниеОповещения  = Новый ОписаниеОповещения("ЗаполнитьФормуИзКлючаСписка", ЭтотОбъект);
	ПараметрыОткрытия.Отбор.ЕстьНастройка = Истина;
	
	ИТМ_АдминистрированиеДинамическихСписковКлиент.ОткрытьФормуВыбораКлючаСписка(ПараметрыОткрытия);
	
КонецПроцедуры

// Заполнить форму из ключа списка.
// 
// Параметры:
//  КлючСписка - СправочникСсылка.КлючевыеОперации - Ключ списка
//  ДополнительныеПараметры - Неопределено - Дополнительные параметры
&НаКлиенте
Процедура ЗаполнитьФормуИзКлючаСписка(КлючСписка, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(КлючСписка) = Тип("СправочникСсылка.КлючевыеОперации")
		И ЗначениеЗаполнено(КлючСписка) Тогда
		
		ИнициализироватьФорму(КлючСписка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеОтображения

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЭлементыФормы(Форма)
	
	ОбновитьЭлементыФормы_Общие(Форма);
	
	ОбновитьЭлементыФормы_Основные(Форма);
	
	ОбновитьЭлементыФормы_Источник(Форма);
	
	ОбновитьЭлементыФормы_Отбор(Форма);
	
	ОбновитьЭлементыФормы_Группировка(Форма);
	
	ОбновитьЭлементыФормы_Сортировка(Форма);
	
	ОбновитьЭлементыФормы_УсловноеОформление(Форма);
	
	ОбновитьЭлементыФормы_ИсторияОбновления(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЭлементыФормы_Общие(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		"СтраницыНастройки", "ТолькоПросмотр", НЕ Форма.Запись.Использование);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЭлементыФормы_Основные(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		"Основные_ИсключенияОтключенияПользовательскихНастроек", "Видимость", 
		Форма.Основные_ОтключатьПользовательскиеНастройкиПриОткрытии);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЭлементыФормы_Источник(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		"СтраницыНастройкиИсточника", "ТолькоПросмотр", НЕ Форма.Источник_Использование);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		"КонструкторЗапросаИсточника", "Доступность", Форма.Источник_Использование);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		"КонтекстноеМенюКонструкторЗапросаИсточника", "Доступность", Форма.Источник_Использование);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЭлементыФормы_Отбор(Форма)
	
	УстановитьСвойствоЭлементам(Форма, 
		"СтраницыНастройкиОтбора,Отбор_ОтключатьПользовательскиеНастройкиПриОткрытии,ОтборШапкаПраво",
		"ТолькоПросмотр", НЕ Форма.Отбор_Использование);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		"ГруппаУсловныеЗапретыОтборов", "ТолькоПросмотр", Форма.Отбор_ЗапрещатьПоВсемПолям);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,	"Отбор_ИсключенияОтключенияПользовательскихНастроек", "Видимость", 
		Форма.Отбор_ОтключатьПользовательскиеНастройкиПриОткрытии = Истина); // sonar:BooleanLiteral
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЭлементыФормы_Группировка(Форма)
	
	УстановитьСвойствоЭлементам(Форма, 
		"СтраницыНастройкиГруппировки,Группировка_ОтключатьПользовательскиеНастройкиПриОткрытии,ГруппировкаШапкаПраво",
		"ТолькоПросмотр", НЕ Форма.Группировка_Использование);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		"ГруппаУсловныеЗапретыГруппировки", "ТолькоПросмотр", Форма.Группировка_ЗапрещатьПоВсемПолям);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,	"Группировка_ИсключенияОтключенияПользовательскихНастроек", "Видимость", 
		Форма.Группировка_ОтключатьПользовательскиеНастройкиПриОткрытии = Истина); // sonar:BooleanLiteral
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЭлементыФормы_Сортировка(Форма)
	
	УстановитьСвойствоЭлементам(Форма, 
		"СтраницыНастройкиСортировки,Сортировка_ОтключатьПользовательскиеНастройкиПриОткрытии,СортировкаШапкаПраво",
		"ТолькоПросмотр", НЕ Форма.Сортировка_Использование);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		"ГруппаУсловныеЗапретыСортировки", "ТолькоПросмотр", Форма.Сортировка_ЗапрещатьПоВсемПолям);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "Сортировка_ИсключенияОтключенияПользовательскихНастроек", "Видимость", 
		Форма.Сортировка_ОтключатьПользовательскиеНастройкиПриОткрытии = Истина); // sonar:BooleanLiteral
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЭлементыФормы_УсловноеОформление(Форма)
	
	УстановитьСвойствоЭлементам(Форма, 
		"СтраницыНастройкиУсловногоОформления,УсловноеОформлениеШапка",
		"ТолькоПросмотр", НЕ Форма.УсловноеОформление_Использование);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "УсловноеОформление_ИсключенияОтключенияПользовательскихНастроек", "Видимость", 
		Форма.УсловноеОформление_ОтключатьПользовательскиеНастройкиПриОткрытии = Истина); // sonar:BooleanLiteral
	
КонецПроцедуры
  
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЭлементыФормы_ИсторияОбновления(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		"ВсеНастройкиИсторииОбновления", "ТолькоПросмотр", НЕ Форма.ИсторияОбновления_Использование);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		"ИсторияОбновления_ДетальнаяЗапись", "ТолькоПросмотр", Форма.ИсторияОбновления_ФиксироватьВсе);
	
КонецПроцедуры

// Обновить количество дополнительных полей.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  ПрефиксПолей - Строка - Префикс полей
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКоличествоДополнительныхПолей(Форма, ПрефиксПолей)
	
	ШаблонИмениРеквизита    = "%1_%2";
	
	ИмяРеквизитаКоличества  = СтрШаблон(ШаблонИмениРеквизита, ПрефиксПолей, "КоличествоДополнительныхПолей");
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИмяРеквизитаКоличества) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизитаРазрешенных = СтрШаблон(ШаблонИмениРеквизита, ПрефиксПолей, "ДополнительноРазрешенные");
	ИмяРеквизитаЗапрещенных = СтрШаблон(ШаблонИмениРеквизита, ПрефиксПолей, "ДополнительноЗапрещенные");
	
	ИмяРеквизитаКоличестваРазрешенных  = СтрШаблон(ШаблонИмениРеквизита, ПрефиксПолей, "КоличествоДополнительноРазрешенных");
	ИмяРеквизитаКоличестваЗапрещенных  = СтрШаблон(ШаблонИмениРеквизита, ПрефиксПолей, "КоличествоДополнительноЗапрещенных");
	ИмяРеквизитаКоличестваВсего        = СтрШаблон(ШаблонИмениРеквизита, ПрефиксПолей, "КоличествоДополнительныхПолей");
	
	ТекущийСписокРазрешенных = Форма[ИмяРеквизитаРазрешенных]; //СписокЗначений
	ТекущийСписокЗапрещенных = Форма[ИмяРеквизитаЗапрещенных]; //СписокЗначений
	КоличествоРазрешенных = КоличествоПомеченныхСтрокСписка(ТекущийСписокРазрешенных);
	КоличествоЗапрещенных = КоличествоПомеченныхСтрокСписка(ТекущийСписокЗапрещенных);
	
	Форма[ИмяРеквизитаКоличестваРазрешенных] = КоличествоРазрешенных;
	Форма[ИмяРеквизитаКоличестваЗапрещенных] = КоличествоЗапрещенных;
	
	Форма[ИмяРеквизитаКоличестваВсего]       = КоличествоРазрешенных + КоличествоЗапрещенных;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФиксируемыеСобытияИсторииОбновления(Элемент)

	//Изменение флага "Фиксировать все"
	Если Элемент = Элементы.ИсторияОбновления_ФиксироватьВсе Тогда

		НовоеЗначениеУсловных = НЕ ИсторияОбновления_ФиксироватьВсе;
		ИсторияОбновления_ФиксироватьОтборы      = НовоеЗначениеУсловных;
		ИсторияОбновления_ФиксироватьСортировки  = НовоеЗначениеУсловных;
		ИсторияОбновления_ФиксироватьГруппировки = НовоеЗначениеУсловных;

	//Все флаги отключены		
	ИначеЕсли НЕ Макс(ИсторияОбновления_ФиксироватьГруппировки, 
		ИсторияОбновления_ФиксироватьОтборы, ИсторияОбновления_ФиксироватьСортировки) Тогда
		
		ИсторияОбновления_ФиксироватьВсе = Истина;
		
	КонецЕсли;
	
	ОбновитьЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ТекстЗапроса
	 
&НаКлиенте
Процедура ОткрытьКонструкторЗапросаИсточника()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатКонструктораЗапроса", ЭтотОбъект);
	
	КонструкторЗапроса = Новый КонструкторЗапроса;
	КонструкторЗапроса.Текст = ТекстЗапросаИсточника(ЭтотОбъект);
	КонструкторЗапроса.РежимКомпоновкиДанных = Истина;
	//@skip-check invocation-parameter-type-intersect - Баг ЕДТ
	КонструкторЗапроса.Показать(ОписаниеОповещения);
	
КонецПроцедуры

// Обработать результат конструктора запроса.
// 
// Параметры:
//  ТекстЗапроса - Строка - Текст запроса
//  ДополнительныеПараметры - Структура - Дополнительные параметры
&НаКлиенте
Процедура ОбработатьРезультатКонструктораЗапроса(ТекстЗапроса, ДополнительныеПараметры) Экспорт
	
	Если ТекстЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Источник_ТекстЗапроса = ТекстЗапроса;
	ОбновитьКомпоновщикДанныхИсточника();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстЗапросаИсточника(Форма)
	
	Если ПустаяСтрока(Форма.Источник_ТекстЗапроса) Тогда
		Если ПустаяСтрока(Форма.Источник_ОсновнаяТаблица) Тогда
			ТекстЗапроса = "ВЫБРАТЬ 0";
		Иначе
			ТекстЗапроса = СтрШаблон("ВЫБРАТЬ * ИЗ %1", Форма.Источник_ОсновнаяТаблица);
		КонецЕсли;
	Иначе
		ТекстЗапроса = Форма.Источник_ТекстЗапроса;
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Вспомогательные

// Установить свойство элементам.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  ИменаЭлементовСтр - Строка - Имена элементов стр
//  Свойство - Строка - Свойство
//  Значение - Булево - Значение
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойствоЭлементам(Форма, ИменаЭлементовСтр, Свойство, Значение)
	
	Разделители = ",
	| ";
	
	ИменаЭлементов = СтрРазделить(ИменаЭлементовСтр, Разделители, Ложь);
	
	Для Каждого ИмяЭлемента Из ИменаЭлементов Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы, ИмяЭлемента, Свойство, Значение);
	КонецЦикла;
	
КонецПроцедуры
	
&НаСервере
Функция ЗначенияРеквизитовФормы()
	
	РеквизитыФормы     = ПолучитьРеквизиты();
	ЗначенияРеквизитов = Новый Структура;
	
	Для Каждого РеквизитФормы Из РеквизитыФормы Цикл
		ЗначенияРеквизитов.Вставить(РеквизитФормы.Имя, ЭтотОбъект[РеквизитФормы.Имя]);
	КонецЦикла;
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции

// Количество помеченных строк списка.
// 
// Параметры:
//  СписокЗначений - СписокЗначений из Произвольный - Список значений
// 
// Возвращаемое значение:
//  Число - Количество помеченных строк списка
&НаКлиентеНаСервереБезКонтекста
Функция КоличествоПомеченныхСтрокСписка(СписокЗначений)
	
	КоличествоПомеченных = 0;
	Для Каждого СтрокаСписка Из СписокЗначений Цикл
		Если СтрокаСписка.Пометка Тогда
			КоличествоПомеченных = КоличествоПомеченных + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КоличествоПомеченных;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСпискиРолей()

	СписокРолей.Очистить();
	
    Для каждого Роль Из Метаданные.Роли Цикл
		//@skip-check typed-value-adding-to-untyped-collection - баг ЕДТ
		СписокРолей.Добавить(Роль.Имя, Роль.Синоним);
	КонецЦикла;
	
КонецПроцедуры

// Параметры события после отметки элементов.
// 
// Возвращаемое значение:
//  Структура:
// * ИмяСтраницы - Строка
&НаКлиенте
Функция ПараметрыСобытияПослеОтметкиЭлементов()
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяСтраницы", "");
	
	Возврат Результат;
	
КонецФункции

// Роли пользователей без ограничений начало выбора.
// 
// Параметры:
//  ИмяСтраницы - Строка - Имя страницы
&НаКлиенте
Процедура РолиПользователейБезОграниченийНачалоВыбора(ИмяСтраницы)
	
	// пометки в списке ролей
	СписокРолейСтраницы = ЭтотОбъект[ИмяСтраницы+"_РолиПользователейБезОграничений"]; //СписокЗначений
	
	СписокРолей.ЗаполнитьПометки(Ложь);
	
	Для каждого ЭлементСписка Из СписокРолейСтраницы Цикл
		РольСписка = СписокРолей.НайтиПоЗначению(ЭлементСписка.Значение);
		Если НЕ РольСписка = Неопределено Тогда
			РольСписка.Пометка = Истина;
		КонецЕсли;		
	КонецЦикла;
	
	ДополнительныеПараметры = ПараметрыСобытияПослеОтметкиЭлементов();
	ДополнительныеПараметры.ИмяСтраницы = ИмяСтраницы;
	
	ОповещениеПослеОтметкиЭлементов = Новый ОписаниеОповещения(
		"ПослеОтметкиЭлементов", ЭтотОбъект,ДополнительныеПараметры);
	//@skip-check invocation-parameter-type-intersect - Баг ЕДТ
	СписокРолей.ПоказатьОтметкуЭлементов(ОповещениеПослеОтметкиЭлементов, "Выбор ролей");
	
КонецПроцедуры

// После отметки элементов.
// 
// Параметры:
//  ЭлементыСписка - СписокЗначений из Произвольный - Элементы списка
//  ПараметрыВыбор - см. ПараметрыСобытияПослеОтметкиЭлементов
&НаКлиенте
Процедура ПослеОтметкиЭлементов(ЭлементыСписка, ПараметрыВыбор)	Экспорт
	
	ИмяСписка = ПараметрыВыбор.ИмяСтраницы + "_РолиПользователейБезОграничений";
	СписокРолейСтраницы = ЭтотОбъект[ИмяСписка]; //СписокЗначений из Неопределено
	
	Если ЭлементыСписка <> Неопределено Тогда
		
		СписокРолейСтраницы.Очистить();
		Для Каждого ЭлементСписка Из ЭлементыСписка Цикл
			Если ЭлементСписка.Пометка Тогда
				СписокРолейСтраницы.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МеханизмыСхемыКомпоновкиДанных

// Новый объект СКД
// 
// Возвращаемое значение:
//  СхемаКомпоновкиДанных
&НаСервере
Функция НовыйСКД()
	
	СхемаКомпоновкиДанных	= Новый СхемаКомпоновкиДанных;
	
	Источник 					= СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
    Источник.Имя 				= "ЛокальнаяБаза";
    Источник.СтрокаСоединения 	= "";
    Источник.ТипИсточникаДанных = "Local";
	
	Возврат СхемаКомпоновкиДанных;
		
КонецФункции

// Добавить набор данных запрос.
// 
// Параметры:
//  СКД - СхемаКомпоновкиДанных - СКД
//  Имя - Строка - Имя
//  Запрос - Строка - Запрос
// 
// Возвращаемое значение:
//  НаборДанныхЗапросСхемыКомпоновкиДанных
&НаСервере
Функция ДобавитьНаборДанныхЗапрос(СКД, Имя, Запрос)
	
	НаборДанных	= СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя				= Имя;
	НаборДанных.Запрос			= Запрос;
	
	НаборДанных.ИсточникДанных	= СКД.ИсточникиДанных.Получить(0).Имя;
		
	НаборДанных.АвтоЗаполнениеДоступныхПолей	= Истина;
	
	Возврат НаборДанных;
		
КонецФункции

// Новый компоновщик настроек.
// 
// Параметры:
//  СхемаКомпоновкиДанных - СхемаКомпоновкиДанных, Строка - Схема компоновки данных
//  Настройки - Неопределено, НастройкиКомпоновкиДанных - Настройки
// 
// Возвращаемое значение:
//  КомпоновщикНастроекКомпоновкиДанных
&НаСервере
Функция НовыйКомпоновщикНастроек(СхемаКомпоновкиДанных, Настройки = Неопределено)
	
	КомпоновщикНастроек	= Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(?(Настройки = Неопределено, СхемаКомпоновкиДанных.НастройкиПоУмолчанию, Настройки));
	
	Возврат КомпоновщикНастроек;
	
КонецФункции

#КонецОбласти

#КонецОбласти
